{"version":3,"sources":["Legend.js","App.js","serviceWorker.js","index.js"],"names":["Legend","props","legend","L","control","position","onAdd","div","DomUtil","create","id","names","colors","color","labels","i","length","push","innerHTML","join","map","this","leaflet","addTo","MapControl","withLeaflet","md","Remarkable","html","xhtmlOut","typographer","TextBox","pagedata","console","log","page","data","dangerouslySetInnerHTML","__html","React","Component","InterviewBox","interview","interviewdata","className","response","interviewmedia","title","interviewee","interviewer","reviser","date","location","gender","race","occupation","src","type","width","height","onClick","handleMediaButton","window","open","number","repeat","pad","toString","substr","handleInterview","alt","Viewer","state","geodata","overlay","image","mapstate","value","label","welcome","fetch","then","res","json","setState","handleChangePage","document","getElementById","style","visibility","display","media","undefined","class","text","render","Map","bounds","zoomControl","scrollWheelZoom","touchZoom","minZoom","maxZoom","maxBounds","attributionControl","ZoomControl","TileLayer","url","attribution","doubleClickZoom","val","tcolor","key","CircleMarker","center","lat","lon","radius","stroke","Tooltip","direction","offset","pointerEvents","paddingLeft","paddingTop","fontSize","marginBottom","options","placeholder","onChange","e","handleMapstateChange","handleOverlay","handleWelcome","textAlign","bind","handleImage","App","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f9a53f33.chunk.js","sourcesContent":["import { MapControl, withLeaflet } from \"react-leaflet\";\nimport L from \"leaflet\";\n\nclass Legend extends MapControl {\n  createLeafletElement(props) {}\n\n  componentDidMount() {\n\n    const legend = L.control({ position: \"bottomright\" });\n\n    legend.onAdd = () => {\n      const div = L.DomUtil.create(\"div\", \"info legend\");\n      div.id = this.props.id;\n\n      var names = null;\n      var colors = null;\n\n      if (this.props.color === \"gender\")\n      {\n        names = [\"Female\", \"Male\", \"Unknown\"];\n        colors = [\"blue\", \"red\", \"black\"]\n      }\n      if (this.props.color === \"race\")\n      {\n        names = [\"Black\", \"White\", \"Unknown\"];\n        colors = [\"green\", \"pink\", \"black\"]\n      }\n\n      let labels = [];\n\n      for (let i = 0; i < names.length; i++) {\n        labels.push(\n          '<i style=\"background:' +\n            colors[i] +\n            '\"></i> ' +\n            names[i]\n        );\n      }\n\n      div.innerHTML = labels.join(\"<br>\");\n      return div;\n    };\n\n    const { map } = this.props.leaflet;\n    legend.addTo(map);\n  }\n}\n\nexport default withLeaflet(Legend);\n","import React from 'react';\nimport Dropdown from 'react-dropdown';\nimport { Remarkable } from 'remarkable';\nimport 'react-dropdown/style.css';\n\nimport { Map, CircleMarker, TileLayer, ZoomControl, Tooltip } from 'react-leaflet'\nimport Legend from \"./Legend\";\n\nimport './App.css';\nimport \"leaflet/dist/leaflet.css\";\n\nvar md = new Remarkable({\n  html: true,\n  xhtmlOut: true,\n  typographer: true,\n});\n\nfunction padZeros(number, pad) {\n    return (\"0\".repeat(pad) + number).toString().substr(-pad, pad);\n}\n\nclass TextBox extends React.Component {\n\n  render() {\n    if (!this.props.pagedata) {\n      return <span>Waiting...</span>\n    }\n\n    console.log(this.props.page);\n    if (typeof this.props.pagedata != 'string') {\n      return (this.props.pagedata)\n    }\n\n    const data = this.props.pagedata;\n    function createMarkup() { return {__html: data}; };\n\n    return(\n      <div id=\"textbox\" dangerouslySetInnerHTML={createMarkup()} />\n    )\n  }\n}\n\nclass InterviewBox extends React.Component {\n\n  render() {\n\n    if ((this.props.interview < 0) | !this.props.interviewdata)\n    {\n      return(\n          <div id=\"interview-container\" className=\"hidden\">\n          </div>\n      )\n    }\n\n    var response = null;\n    if (this.props.interviewmedia === \"meta\")\n    {\n      response = (\n        <ul>\n          <li>Title: <span>{this.props.interviewdata.title}</span></li>\n          <li>Interviewee(s): <span>{this.props.interviewdata.interviewee}</span></li>\n          <li>Interviewer(s): <span>{this.props.interviewdata.interviewer}</span></li>\n          <li>Reviser(s): <span>{this.props.interviewdata.reviser}</span></li>\n          <li>Date: <span>{this.props.interviewdata.date}</span></li>\n          <li>Location: <span>{this.props.interviewdata.location}</span></li>\n          <li>Gender (Interviewee): <span>{this.props.interviewdata.gender}</span></li>\n          <li>Race (Interviewee): <span>{this.props.interviewdata.race}</span></li>\n          <li>Occupation (Interviewee): <span>{this.props.interviewdata.occupation}</span></li>\n        </ul>\n      )\n    } else {\n      response = (\n        <embed\n          src=\"./data/pdfs/1049.pdf\"\n          type=\"application/pdf\"\n          width=\"100%\"\n          height=\"400px\"/>\n      )\n    }\n\n    return(\n      <div id=\"interview-container\">\n        <div className=\"interview-meta\">\n          <h3>Interview #{this.props.interviewdata.id}</h3>\n          <div className=\"interview-btn-grp\">\n            <button\n              onClick={() => this.props.handleMediaButton('meta')}\n              className={this.props.interviewmedia === \"meta\" ? \"active\" : \"\"}>\n              metadata\n            </button>\n            <button\n              onClick={() => this.props.handleMediaButton('pdf')}\n              className={this.props.interviewmedia === \"pdf\" ? \"active\" : \"\"}>\n              pdf\n            </button>\n            <button\n              onClick={() => window.open(\"./data/pdfs/1049.pdf\")}>\n              pdf (download)\n            </button>\n            <button\n              onClick={null}>\n              xml (download)\n            </button>\n            <button\n              onClick={() => window.open(\"./data/text/interview_\" + padZeros(this.props.interviewdata.id, 4) + \".txt\")}>\n              text (download)\n            </button>\n          </div>\n          <hr width=\"100%\"/>\n          {response}\n          <img\n            className=\"svg-close\"\n            src=\"static/close-black.svg\"\n            width=\"30\"\n            height=\"30\"\n            onClick={() => this.props.handleInterview(-1)}\n            alt=\"\"/>\n        </div>\n      </div>\n    )\n  }\n}\n\n// ***************************************************************************\n// Main class that holds the state of the App\n\nclass Viewer extends React.Component {\n\n  // Override two standard methods of React.Component //\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: 0,\n      pagedata: null,\n      geodata: null,\n      interview: -1,\n      interviewdata: null,\n      interviewmedia: 'meta',\n      overlay: false,\n      image: -1,\n      mapstate: { value: null, label: '[Reset]' },\n      welcome: true,\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"./data/geodata.json\").then(res => {\n      return res.json()\n    }).then(res => {\n      this.setState({\n        geodata: res,\n      });\n    });\n\n    this.handleChangePage(this.state.page);\n  }\n\n  handleMapstateChange(value) {\n\n    var legend = document.getElementById(\"legend-race\");\n    if (value.value === \"race\")\n    {\n      legend.style.visibility = \"visible\";\n      legend.style.display = \"inline\";\n    } else {\n      legend.style.visibility = \"hidden\";\n      legend.style.display = \"none\";\n    }\n    legend = document.getElementById(\"legend-gender\");\n    console.log(legend.className);\n    if (value.value === \"gender\")\n    {\n      legend.style.visibility = \"visible\";\n      legend.style.display = \"inline\";\n    } else {\n      legend.style.visibility = \"hidden\";\n      legend.style.display = \"none\";\n    }\n\n    this.setState({\n      mapstate: value,\n    });\n  }\n\n  handleWelcome(value) {\n    this.setState({\n      welcome: value,\n    });\n  }\n\n  handleInterview(value) {\n    this.setState({\n      interview: value,\n      interviewdata: null,\n      interviewmedia: 'meta'\n    });\n\n    if (value >= 0)\n    {\n      fetch(\"./data/interviews/\" + value + \".json\").then(res => {\n        return res.json()\n      }).then(res => {\n        this.setState({\n          interviewdata: res,\n        });\n      });\n    }\n  }\n\n  handleImage(value) {\n    this.setState({\n      image: value,\n    });\n  }\n\n  handleMediaButton(value) {\n    this.setState({\n      interviewmedia: value,\n    });\n  }\n\n  handleOverlay(value, media) {\n    if (media === undefined)\n    {\n      media = this.state.media\n    }\n\n    this.setState({\n      overlay: value,\n      media: media\n    });\n  }\n\n  handleChangePage(page) {\n      this.setState({\n        page: page,\n        data: null,\n      });\n\n      if (page === 0)\n      {\n        this.setState({\n          pagedata: (<div id=\"textbox\">\n            <h1> Table of Contents </h1>\n\n            <button class=\"toc-button\" onClick={() => this.handleChangePage(1)}>\n              Layer 1: Introduction\n            </button>\n\n            <button class=\"toc-button\"  onClick={() => this.handleChangePage(2)}>\n              Layer 2: Documenting People &amp; Histories\n            </button>\n\n            <button class=\"toc-button\"  onClick={() => this.handleChangePage(3)}>\n              Layer 3: Placing the Life Histories\n            </button>\n\n            <button class=\"toc-button\"  onClick={() => this.handleChangePage(4)}>\n              Layer 4: Distant Reading Rhetoric &amp; Style\n            </button>\n\n            <button class=\"toc-button\"  onClick={() => this.handleChangePage(5)}>\n              Layer 5: Method\n            </button>\n\n            <button class=\"toc-button\"  onClick={() => this.handleChangePage(6)}>\n              Layer 6: About\n            </button>\n            </div>\n          )\n        });\n      } else {\n        fetch(\"./data/layers/\" + page + \".md\").then(res => {\n          return res.text()\n        }).then(res => {\n          this.setState({\n            pagedata: md.render(res),\n          });\n        });\n      }\n  }\n\n  render() {\n\n    if (!this.state.geodata) {\n      return <span>Waiting...</span>\n    }\n\n    const options = [\n      { value: 'gender', label: 'Gender of Interviewee' },\n      { value: 'race', label: 'Race of Interviewee' },\n      { value: null, label: '[Reset]' }\n    ];\n\n    const map = (\n      <div id=\"map-container\">\n        <Map\n          bounds={[[25.53511, -92.33793], [38.47061, -75.68696]]}\n          zoomControl={false}\n          scrollWheelZoom={false}\n          touchZoom={false}\n          minZoom={5}\n          maxZoom={10}\n          maxBounds={[[20, -95], [45, -70]]}\n          attributionControl={false}>\n          <ZoomControl\n            position='topright'\n            />\n          <Legend\n            position='bottomright'\n            color='race'\n            id=\"legend-race\"\n            />\n          <Legend\n            position='bottomright'\n            color='gender'\n            id=\"legend-gender\"\n            />\n          <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            attribution=\"\"\n            scrollWheelZoom=\"false\"\n            touchZoom=\"false\"\n            doubleClickZoom=\"false\"\n          />\n\n          {this.state.geodata.map( (val, i) => {\n\n            var tcolor = \"black\";\n            if (this.state.mapstate.value === \"race\") tcolor = val.race;\n            if (this.state.mapstate.value === \"gender\") tcolor = val.gender;\n\n            return (\n              <div key={i}>\n              <CircleMarker\n                center={[val.lat, val.lon]}\n                radius={5}\n                color={tcolor}\n                stroke={false}\n                onClick={() => this.handleInterview(val.id)}>\n                <Tooltip direction=\"top\" offset={[0,-6]}>\n                  <b>{val.title}</b><br/>\n                  Interviewer: {val.interviewer}\n                </Tooltip>\n              </CircleMarker>\n              </div>\n            )\n          })}\n\n          <div className=\"leaflet-top leaflet-left\" style={{pointerEvents: 'auto', paddingLeft: \"12px\", paddingTop: \"12px\"}}>\n            <div style={{fontSize: \"16px\", marginBottom: \"12pt\", display:\"inline\"}}>\n               <Dropdown options={options}\n                value={this.state.mapstate.value === null ? null : this.state.mapstate}\n                placeholder=\"Color interviews by...\"\n                onChange={(e) => this.handleMapstateChange(e)}\n                className=\"dropdown\"\n                />\n            </div>\n          </div>\n        </Map>\n      </div>\n    )\n\n    return (\n    <div>\n    <div id=\"header\">\n\n      <span onClick={() => this.handleChangePage(0)}>\n        Voice of a Nation: Life Histories in New Deal America\n      </span>\n\n      <div className=\"btn-group\">\n        <button\n          className={this.state.page === 1 ? \"active\" : \"\"}\n          onClick={() => this.handleChangePage(1)}>1</button>\n        <button\n          className={this.state.page === 2 ? \"active\" : \"\"}\n          onClick={() => this.handleChangePage(2)}>2</button>\n        <button\n          className={this.state.page === 3 ? \"active\" : \"\"}\n          onClick={() => this.handleChangePage(3)}>3</button>\n        <button\n          className={this.state.page === 4 ? \"active\" : \"\"}\n          onClick={() => this.handleChangePage(4)}>4</button>\n        <button\n          className={this.state.page === 5 ? \"active\" : \"\"}\n          onClick={() => this.handleChangePage(5)}>5</button>\n        <button\n          className={this.state.page === 6 ? \"active\" : \"\"}\n          onClick={() => this.handleChangePage(6)}>6</button>\n        <button\n          className={this.state.page === 0 ? \"btn-text active\" : \"btn-text\"}\n          onClick={() => this.handleChangePage(0)}>Contents</button>\n      </div>\n    </div>\n\n    <TextBox\n      page={this.state.page}\n      pagedata={this.state.pagedata}\n    />\n\n    <div id=\"multi-container\" onClick={() => this.handleOverlay(false)} className={this.state.overlay ? \"\" : \"hidden-sml\"}>\n      <div\n        id=\"welcome-container\"\n        className={this.state.welcome ? \"\" : \"hidden\"}>\n        <div className=\"welcome-msg\" onClick={() => this.handleWelcome(false)}>\n          <h3>Mapping Southern Life Histories</h3>\n          <p>\n            The interactive map in this panel show over 1100 oral histories taken\n            by the Southern Life Histories Project from 1939 to 1941. Points are\n            mapped to where each oral history was recorded. Clicking on\n            a dot to display metadata and the text from each digitized life\n            history. Points can further colored by the demographics of the\n            interviewees from the pull down menu in the upper left-hand corner\n            of the map.\n          </p>\n          <div style={{width: \"100%\", textAlign: \"center\"}}>\n            <button onClick={() => this.handleWelcome(false)}>Enter</button>\n          </div>\n        </div>\n      </div>\n      <InterviewBox\n        interview={this.state.interview}\n        interviewdata={this.state.interviewdata}\n        interviewmedia={this.state.interviewmedia}\n        handleInterview={this.handleInterview.bind(this)}\n        handleMediaButton={this.handleMediaButton.bind(this)}\n      />\n      <div id=\"map-container\">\n        {map}\n      </div>\n      <div id=\"img-container\" className={this.state.image >= 0 ? \"\" : \"hidden\"}>\n        <div id=\"img-fig\">\n          <img className=\"img-main\" alt=\"\" src=\"img/people.png\">\n          </img>\n          <img\n            className=\"svg-close\"\n            src=\"static/close.svg\"\n            width=\"30\"\n            height=\"30\"\n            alt=\"\"\n            onClick={() => this.handleImage(-1)}/>\n          <p>Figure 1. Here is a caption about this image that relates to the text on the left in some way (hopefully).</p>\n        </div>\n      </div>\n    </div>\n\n    <div id=\"footer\">\n      <span id=\"authors\">T. Arnold, C. Rivard, L. Tilton</span>\n      <span id=\"notice\">Digital Project &mdash; Currently Under Review </span>\n    </div>\n\n    </div>\n    );\n  }\n}\n\n// ***************************************************************************\n// Wrap the App and return the rendered Viewer\n\nfunction App() {\n  return (\n    <Viewer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}