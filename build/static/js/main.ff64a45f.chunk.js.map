{"version":3,"sources":["Legend.js","App.js","serviceWorker.js","index.js"],"names":["Legend","props","legend","L","control","position","onAdd","div","DomUtil","create","id","names","colors","color","labels","i","length","push","innerHTML","join","map","this","leaflet","addTo","MapControl","withLeaflet","padZeros","number","pad","repeat","toString","substr","md","Remarkable","html","xhtmlOut","typographer","TextBox","pagedata","data","onClick","click","clickmap","clicktopic","dangerouslySetInnerHTML","__html","React","Component","InterviewBox","interview","interviewdata","className","response","interviewmedia","title","interviewee","interviewer","reviser","date","location","gender","race","occupation","src","type","width","height","handleMediaButton","window","open","handleInterview","alt","InterviewTopicBox","TopicCircles","val","key","num","clickfun","style","left","x","bottom","y","r","lineHeight","borderRadius","name","ListBar","maxval","Math","max","weights","class","titleleft","titleright","items","numcol","round","clickid","clickids","clickclass","TopicContainer","state","td","topicstate","topic","topicdoc","fetch","then","res","json","setState","value","cls","hidden","topicpart","all","handleChangeTopic","bind","description","proportion","topics","top_word","word_wgt","top_docs","doc_perc","handleChangeTopicDoc","top_docs_ids","docs","top_topics","topic_weights","top_topics_ids","header","href","target","rel","handleChangeTopicstate","Viewer","page","geodata","image","mapstate","label","mapfilter","welcome","intertype","overtype","handlePage","document","getElementById","visibility","display","console","log","handleIntertype","handleWelcome","media","undefined","overlay","handleMapstateChange","handleMapfilterChange","handleOvertypeChange","paddingTop","text","render","Map","bounds","zoomControl","scrollWheelZoom","touchZoom","minZoom","maxZoom","maxBounds","attributionControl","ZoomControl","TileLayer","url","attribution","doubleClickZoom","tcolor","racei","genderi","ishow","CircleMarker","center","lat","lon","radius","stroke","Tooltip","direction","offset","options","placeholder","onChange","e","handleOverlay","textAlign","App","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ff64a45f.chunk.js","sourcesContent":["import { MapControl, withLeaflet } from \"react-leaflet\";\nimport L from \"leaflet\";\n\nclass Legend extends MapControl {\n  createLeafletElement(props) {}\n\n  componentDidMount() {\n\n    const legend = L.control({ position: \"bottomright\" });\n\n    legend.onAdd = () => {\n      const div = L.DomUtil.create(\"div\", \"info legend\");\n      div.id = this.props.id;\n\n      var names = null;\n      var colors = null;\n\n      if (this.props.color === \"gender\")\n      {\n        names = [\"Female\", \"Male\", \"Unknown\"];\n        colors = [\"#56B4E9\", \"#E69F00\", \"black\"]\n      }\n      if (this.props.color === \"race\")\n      {\n        names = [\"Black\", \"White\", \"Unknown\"];\n        colors = [\"#009E73\", \"#CC79A7\", \"black\"]\n      }\n\n      let labels = [];\n\n      for (let i = 0; i < names.length; i++) {\n        labels.push(\n          '<i style=\"background:' +\n            colors[i] +\n            '\"></i> ' +\n            names[i]\n        );\n      }\n\n      div.innerHTML = labels.join(\"<br>\");\n      return div;\n    };\n\n    const { map } = this.props.leaflet;\n    legend.addTo(map);\n  }\n}\n\nexport default withLeaflet(Legend);\n","import React from 'react';\nimport Dropdown from 'react-dropdown';\nimport { Remarkable } from 'remarkable';\n\nimport {\n  Map, CircleMarker, TileLayer, ZoomControl, Tooltip\n} from 'react-leaflet';\nimport Legend from \"./Legend\";\n\nimport 'leaflet/dist/leaflet.css';\nimport 'react-dropdown/style.css';\nimport './reset.css';\nimport './App.css';\n\n// ***************************************************************************\n// Helper function(s)\n\nfunction padZeros(number, pad) {\n    return (\"0\".repeat(pad) + number).toString().substr(-pad, pad);\n}\n\n// ***************************************************************************\n// Return the text box by rendering the markdown files\n\n// This takes markdown and outputs formated text as a string\nvar md = new Remarkable({\n  html: true,\n  xhtmlOut: true,\n  typographer: true,\n});\n\nclass TextBox extends React.Component {\n\n  render() {\n    if (!this.props.pagedata) {\n      return <span>Waiting...</span>\n    }\n\n    if (typeof this.props.pagedata != 'string') {\n      return (this.props.pagedata)\n    }\n\n    const data = this.props.pagedata;\n    function createMarkup() { return {__html: data}; };\n\n    return(\n      <div id=\"textbox\">\n        <button\n          id=\"text-btn-back\"\n          onClick={this.props.click}>&laquo; Back</button>\n        <button\n          id=\"text-btn-map\"\n          onClick={this.props.clickmap}>Map&raquo;</button>\n        <button\n          id=\"text-btn-topic\"\n          onClick={this.props.clicktopic}>Topics&raquo;</button>\n        <div dangerouslySetInnerHTML={createMarkup()}/>\n      </div>\n    )\n  }\n}\n\n// ***************************************************************************\n// Class to hold all of the data about a specific interview\n\nclass InterviewBox extends React.Component {\n\n  render() {\n\n    if ((this.props.interview < 0) | !this.props.interviewdata)\n    {\n      return(\n          <div id=\"interview-container\" className=\"hidden\">\n          </div>\n      )\n    }\n\n    var response = null;\n    if (this.props.interviewmedia === \"meta\")\n    {\n      response = (\n        <ul>\n          <li>\n            Title: <span>{this.props.interviewdata.title}</span>\n          </li>\n          <li>\n            Interviewee(s): <span>{this.props.interviewdata.interviewee}</span>\n          </li>\n          <li>\n            Interviewer(s): <span>{this.props.interviewdata.interviewer}</span>\n          </li>\n          <li>\n            Reviser(s): <span>{this.props.interviewdata.reviser}</span>\n          </li>\n          <li>\n            Date: <span>{this.props.interviewdata.date}</span>\n          </li>\n          <li>\n            Location: <span>{this.props.interviewdata.location}</span>\n          </li>\n          <li>\n            Gender (Interviewee): <span>{this.props.interviewdata.gender}</span>\n          </li>\n          <li>\n            Race (Interviewee): <span>{this.props.interviewdata.race}</span>\n          </li>\n          <li>\n            Occupation: <span>{this.props.interviewdata.occupation}</span>\n          </li>\n        </ul>\n      )\n    } else {\n      response = (\n        <embed\n          src=\"./data/pdfs/1049.pdf\"\n          type=\"application/pdf\"\n          width=\"100%\"\n          height=\"400px\"/>\n      )\n    }\n\n    return(\n      <div id=\"interview-container\">\n        <div className=\"interview-meta\">\n          <h3>Interview #{this.props.interviewdata.id}</h3>\n          <div className=\"interview-btn-grp\">\n            <button\n              onClick={() => this.props.handleMediaButton('meta')}\n              className={this.props.interviewmedia === \"meta\" ? \"active\" : \"\"}>\n              metadata\n            </button>\n            <button\n              onClick={() => this.props.handleMediaButton('pdf')}\n              className={this.props.interviewmedia === \"pdf\" ? \"active\" : \"\"}>\n              pdf\n            </button>\n            <button\n              onClick={() => window.open(\"./data/pdfs/1049.pdf\")}>\n              pdf (download)\n            </button>\n            <button\n              onClick={() => {\n                window.open(\"./data/xml/interview_\" +\n                  padZeros(this.props.interviewdata.id, 4) + \".xml\")\n              }}>\n              xml\n            </button>\n            <button\n              onClick={() => {\n                window.open(\"./data/text/interview_\" +\n                  padZeros(this.props.interviewdata.id, 4) + \".txt\")\n              }}>\n              text\n            </button>\n          </div>\n          <hr width=\"100%\"/>\n          {response}\n          <img\n            className=\"svg-close\"\n            src=\"static/close-black.svg\"\n            width=\"20\"\n            height=\"20\"\n            onClick={() => this.props.handleInterview(-1)}\n            alt=\"\"/>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass InterviewTopicBox extends React.Component {\n\n  render() {\n\n    if (!this.props.interviewdata)\n    {\n      return null\n    }\n\n    return(\n      <div className=\"topic-meta\">\n        <div className=\"interview-btn-grp\">\n          <button\n            onClick={() => window.open(\"./data/pdfs/1049.pdf\")}>\n            pdf\n          </button>\n          <button\n            onClick={() => {\n              window.open(\"./data/xml/interview_\" +\n                padZeros(this.props.interviewdata.id, 4) + \".xml\")\n            }}>\n            xml\n          </button>\n          <button\n            onClick={() => {\n              window.open(\"./data/text/interview_\" +\n                padZeros(this.props.interviewdata.id, 4) + \".txt\")\n            }}>\n            text\n          </button>\n        </div>\n        <ul>\n          <li>\n            Title: <span>{this.props.interviewdata.title}</span>\n          </li>\n          <li>\n            Interviewee(s): <span>{this.props.interviewdata.interviewee}</span>\n          </li>\n          <li>\n            Interviewer(s): <span>{this.props.interviewdata.interviewer}</span>\n          </li>\n          <li>\n            Reviser(s): <span>{this.props.interviewdata.reviser}</span>\n          </li>\n          <li>\n            Date: <span>{this.props.interviewdata.date}</span>\n          </li>\n          <li>\n            Location: <span>{this.props.interviewdata.location}</span>\n          </li>\n          <li>\n            Gender (Interviewee): <span>{this.props.interviewdata.gender}</span>\n          </li>\n          <li>\n            Race (Interviewee): <span>{this.props.interviewdata.race}</span>\n          </li>\n          <li>\n            Occupation: <span>{this.props.interviewdata.occupation}</span>\n          </li>\n        </ul>\n      </div>\n    )\n  }\n}\n\n// ***************************************************************************\n// Class to hold the topic model\n\nfunction TopicCircles(props) {\n  return(\n    <div className=\"topic-circle-container\">\n      {props.data.map( (val, i) => {\n        return(\n          <div\n            key={val.num}\n            className=\"topic-circle\"\n            onClick={() => props.clickfun(i)}>\n            <div\n              className=\"topic-circle-inner\"\n              style={{\n                left: val.x + \"%\",\n                bottom: val.y + \"%\",\n                width: (val.r * 2) + \"px\",\n                height: (val.r * 2) + \"px\",\n                lineHeight: (val.r * 2) + \"px\",\n                borderRadius:val.r + \"px\"\n              }}>\n              <span>{val.num}</span>\n            </div>\n            <div\n              className=\"topic-circle-overlay\"\n              style={{\n                left: val.x + \"%\",\n                bottom: val.y + \"%\",\n                width: (val.r * 2) + \"px\",\n                height: (val.r * 2) + \"px\",\n                lineHeight: (val.r * 2) + \"px\",\n                borderRadius:val.r + \"px\"\n              }}>\n              <span>{val.name}</span>\n            </div>\n          </div>\n        )\n      })}\n\n    </div>\n  )\n}\n\nfunction ListBar(props) {\n  var maxval = Math.max(...props.weights);\n  var weights = props.weights.map(val => {\n    return(100 * val / maxval)\n  })\n\n  return(\n    <div\n      className={\"topic-list-container\" + props.class}\n      style={{width: props.width}}>\n      <div className=\"topic-list-title\">\n        <span>{props.title}</span>\n      </div>\n      <div className=\"topic-list-row topic-list-row-head\">\n        <span>{props.titleleft}</span>\n        <span>{props.titleright}</span>\n      </div>\n      {props.items.map( (val, i) => {\n        var numcol = null;\n\n        if (props.numcol) {\n          numcol = (\n            <div className=\"topic-list-percent\">\n              <span>{Math.round(props.weights[i]) + \"%\"}</span>\n            </div>\n          )\n        }\n\n        var clickid = i;\n        if (props.clickids) {\n          clickid = props.clickids[i];\n        }\n\n        var clickfun = props.clickfun;\n        var clickclass = \"topic-list-row\";\n        if (!clickfun) {\n          clickfun = function() {};\n          clickclass = \"topic-list-row noclick\"\n        }\n\n        return(\n          <div\n            className={clickclass}\n            key={i}\n            onClick={() => clickfun(clickid)}\n            >\n            <div\n              className=\"topic-list-text\">\n              <span>{val}</span>\n            </div>\n            {numcol}\n            <div className=\"topic-list-size\">\n              <div\n                className=\"topic-list-inner\"\n                style={{width: weights[i] + \"%\"}}>\n              </div>\n            </div>\n          </div>\n        )\n      })}\n\n    </div>\n  )\n}\n\nclass TopicContainer extends React.Component {\n\n  // Override two standard methods of React.Component //\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      td: null,\n      interviewdata: null,\n      interviewmedia: 'meta',\n      topicstate: 'grid',\n      topic: 0,\n      topicdoc: 0\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"./data/topicdata.json\").then(res => {\n      return res.json()\n    }).then(res => {\n      this.setState({\n        td: res,\n      });\n    });\n  }\n\n  handleChangeTopic(topic) {\n    this.setState({\n      topic: topic,\n      topicstate: 'topic',\n    });\n  }\n\n  handleChangeTopicDoc(topicdoc) {\n    this.setState({\n      topicdoc: topicdoc,\n      topicstate: 'doc',\n    });\n\n    fetch(\"./data/interviews/\" + topicdoc + \".json\").then(res => {\n      return res.json()\n    }).then(res => {\n      this.setState({\n        interviewdata: res,\n      });\n    });\n  }\n\n  handleChangeTopicstate(value) {\n    this.setState({\n      topicstate: value,\n    });\n  }\n\n  handleMediaButton(value) {\n    this.setState({\n      interviewmedia: value,\n    });\n  }\n\n  render() {\n\n    if (!this.state.td) {\n      return <span>Waiting...</span>\n    }\n\n    const cls = this.props.hidden ? \"topic-hide\" : \"\";\n\n    var topicpart = null;\n    if (this.state.topicstate === \"grid\") {\n      topicpart = (\n        <div className=\"topic-part\">\n          <TopicCircles\n            data={this.state.td.all}\n            clickfun={this.handleChangeTopic.bind(this)}\n          />\n        </div>\n      );\n    }\n    if (this.state.topicstate === \"list\") {\n      topicpart = (\n        <div className=\"topic-part\">\n          <ListBar\n            titleleft=\"topic\"\n            titleright=\"proportion of corpus\"\n            items={this.state.td.all.map(val => {return(val.description)})}\n            weights={this.state.td.all.map(val => {return(val.proportion)})}\n            width=\"600px\"\n            clickfun={this.handleChangeTopic.bind(this)}\n            numcol={true}\n            class=\"\"\n          />\n        </div>\n      );\n    }\n    if (this.state.topicstate === \"topic\") {\n      topicpart = (\n        <div className=\"topic-part\">\n          <div style={{width: '900px'}}>\n          <ListBar\n            title=\"Associated Words\"\n            titleleft=\"word\"\n            titleright=\"proportion of corpus\"\n            items={this.state.td.topics[this.state.topic].top_word}\n            weights={this.state.td.topics[this.state.topic].word_wgt}\n            width=\"250px\"\n            numcol={false}\n            class=\"\"\n          />\n          <ListBar\n            title=\"Associated Interviews\"\n            titleleft=\"interview\"\n            titleright=\"proportion in topic\"\n            items={this.state.td.topics[this.state.topic].top_docs}\n            weights={this.state.td.topics[this.state.topic].doc_perc}\n            width=\"400px\"\n            clickfun={this.handleChangeTopicDoc.bind(this)}\n            clickids={this.state.td.topics[this.state.topic].top_docs_ids}\n            numcol={true}\n            class=\" topic-list-two\"\n          />\n          </div>\n        </div>\n      );\n    }\n    if (this.state.topicstate === \"doc\") {\n      topicpart = (\n        <div>\n          <InterviewTopicBox\n            interview={this.state.interview}\n            interviewdata={this.state.interviewdata}\n            interviewmedia={this.state.interviewmedia}\n            handleMediaButton={this.handleMediaButton.bind(this)}\n          />\n          <div className=\"topic-part\">\n            <ListBar\n              titleleft=\"Topic\"\n              titleright=\"proportion of document\"\n              items={this.state.td.docs[this.state.topicdoc].top_topics}\n              weights={this.state.td.docs[this.state.topicdoc].topic_weights}\n              clickfun={this.handleChangeTopic.bind(this)}\n              clickids={this.state.td.docs[this.state.topicdoc].top_topics_ids}\n              width=\"300px\"\n              numcol={true}\n              class=\"\"\n            />\n          </div>\n        </div>\n      );\n    }\n\n    var header = \"Topics\";\n    var description = null;\n    if (this.state.topicstate === \"grid\") {\n      header = \"Topics — Plot\";\n      description = (\n        <p>\n          In order to identify themes across the corpus of oral interviews we\n          have applied a computational model called\n          <a href=\"https://en.wikipedia.org/wiki/Latent_Dirichlet_allocation\" target=\"_blank\" rel=\"noopener noreferrer\"> latent Dirchlet allocation (LDA)</a>.\n          The model has identified 16 topics&mdash;groups of weighted words&mdash;that it\n          has determined have some themetical similarity. In the box below, each\n          topic is represented by a bubble. Topics that share common words are\n          displayed near each other; topics with more documents are displayed\n          with larger bubble sizes. Hovering over a topic will display the, manually\n          assigned, name of the topic. Clicking on a topic will open a\n          description of the topic itself. You can also\n          <span onClick={() => this.handleChangeTopicstate(\"list\")}> view the topics as a list</span>.\n        </p>\n      );\n    }\n    if (this.state.topicstate === \"list\") {\n      header = \"Topics — List\";\n      description = (\n        <p>\n          In order to identify themes across the corpus of oral interviews we\n          have applied a computational model called\n          <a href=\"https://en.wikipedia.org/wiki/Latent_Dirichlet_allocation\" target=\"_blank\" rel=\"noopener noreferrer\"> latent Dirchlet allocation (LDA)</a>.\n          The model has identified 16 topics&mdash;groups of weighted words&mdash;that it\n          has determined have some themetical similarity. In the table below, each\n          topic is displayed along with its five most strongly associated words\n          You can also\n          <span onClick={() => this.handleChangeTopicstate(\"grid\")}> view the topics as a plot </span>\n          that visualizes the semantic relationships between topics.\n        </p>\n      );\n    }\n    if (this.state.topicstate === \"topic\") {\n      header = \"Topic \" + (this.state.topic + 1);\n      description = (\n        <p>\n          Details of this topic, as identified by LDA, are shown below. Every\n          word in the corpus is given a score relative to each topic, and the\n          table on the left shows those words most strongly associated with\n          this topic. Similarly, each document is broken down into a score\n          across all of the topics. The table on the right shows those interviews\n          most strongly associated with topic, along with the percentage match\n          between the topic and interview. Clicking on an interview will show\n          metadata and the contents of the interview itself.\n        </p>\n      );\n    }\n    if (this.state.topicstate === \"doc\") {\n      header = \"Document \" + (this.state.topicdoc + 1);\n      description = null;\n    }\n\n    return (\n      <div className={\"topic-container \" + cls}>\n        <div className=\"topic-btn-grp\">\n          <button\n            className={this.state.topicstate === \"grid\" ? \"active\" : \"\"}\n            onClick={() => this.handleChangeTopicstate(\"grid\")}\n            >\n            Plot\n          </button>\n          <button\n            className={this.state.topicstate === \"list\" ? \"active\" : \"\"}\n            onClick={() => this.handleChangeTopicstate(\"list\")}\n            >\n            List\n          </button>\n        </div>\n        <div className=\"topic-header\">\n          <span>{header}</span>\n          {description}\n        </div>\n        {topicpart}\n      </div>\n    )\n  }\n}\n\n\n// ***************************************************************************\n// Main class that holds the state of the App\n\nclass Viewer extends React.Component {\n\n  // Override two standard methods of React.Component //\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: 0,\n      pagedata: null,\n      geodata: null,\n      interview: -1,\n      interviewdata: null,\n      interviewmedia: 'meta',\n      image: -1,\n      mapstate: { value: null, label: '[Reset]' },\n      mapfilter: { value: null, label: '[Reset]' },\n      welcome: true,\n      intertype: 'map',\n      overtype: false,\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"./data/geodata.json\").then(res => {\n      return res.json()\n    }).then(res => {\n      this.setState({\n        geodata: res,\n      });\n    });\n\n    this.handlePage(this.state.page);\n  }\n\n  handleMapstateChange(value) {\n\n    var legend = document.getElementById(\"legend-race\");\n    if (value.value === \"race\" | value.value === \"racei\")\n    {\n      legend.style.visibility = \"visible\";\n      legend.style.display = \"inline\";\n    } else {\n      legend.style.visibility = \"hidden\";\n      legend.style.display = \"none\";\n    }\n    legend = document.getElementById(\"legend-gender\");\n    if (value.value === \"gender\" | value.value === \"genderi\")\n    {\n      legend.style.visibility = \"visible\";\n      legend.style.display = \"inline\";\n    } else {\n      legend.style.visibility = \"hidden\";\n      legend.style.display = \"none\";\n    }\n\n    this.setState({\n      mapstate: value,\n    });\n  }\n\n  handleMapfilterChange(value) {\n    this.setState({\n      mapfilter: value,\n    });\n  }\n\n  handleOvertypeChange(value, intertype) {\n    console.log(value);\n    this.setState({\n      overtype: value,\n    });\n\n    if (intertype) this.handleIntertype(intertype);\n    if (intertype === \"topic\") {\n      this.handleWelcome(false);\n    }\n  }\n\n  handleWelcome(value) {\n    this.setState({\n      welcome: value,\n    });\n  }\n\n  handleInterview(value) {\n    this.setState({\n      interview: value,\n      interviewdata: null,\n      interviewmedia: 'meta'\n    });\n\n    if (value >= 0)\n    {\n      fetch(\"./data/interviews/\" + value + \".json\").then(res => {\n        return res.json()\n      }).then(res => {\n        this.setState({\n          interviewdata: res,\n        });\n      });\n    }\n  }\n\n  handleImage(value) {\n    this.setState({\n      image: value,\n    });\n  }\n\n  handleMediaButton(value) {\n    this.setState({\n      interviewmedia: value,\n    });\n  }\n\n  handleOverlay(value, media) {\n    if (media === undefined)\n    {\n      media = this.state.media\n    }\n\n    this.handleWelcome(false);\n\n    this.setState({\n      overlay: value,\n      media: media\n    });\n  }\n\n  handleIntertype(value) {\n    if (value === \"map\") {\n      this.handleMapstateChange({ value: null, label: '[Reset]' });\n      this.handleMapfilterChange({ value: null, label: '[Reset]' });\n    }\n\n    this.setState({\n      intertype: value,\n      interview: -1\n    });\n\n  }\n\n  handlePage(page) {\n      this.handleOvertypeChange(false);\n\n      this.setState({\n        page: page,\n        data: null,\n      });\n\n      if (page === 0)\n      {\n        this.setState({\n          pagedata: (<div id=\"textbox\"><div>\n            <h1 style={{paddingTop: \"0px\"}}> Table of Contents </h1>\n\n            <button\n              className=\"toc-button toc-button-prop\"\n              onClick={() => this.handlePage(8)}>\n              <b>Proposal</b>\n            </button>\n\n            <button className=\"toc-button\" onClick={() => this.handlePage(1)}>\n              Introduction\n            </button>\n\n            <button className=\"toc-button\"  onClick={() => this.handlePage(2)}>\n              Layer 1: Documenting People &amp; Histories\n            </button>\n\n            <button className=\"toc-button\"  onClick={() => this.handlePage(3)}>\n              Layer 2: They Must Be Heard\n            </button>\n\n            <button className=\"toc-button\"  onClick={() => this.handlePage(4)}>\n              Layer 3: Placing the Life Histories\n            </button>\n\n            <button className=\"toc-button\"  onClick={() => this.handlePage(5)}>\n              Layer 4: Distant Reading\n            </button>\n\n            <button className=\"toc-button\"  onClick={() => this.handlePage(6)}>\n              Conclusion\n            </button>\n\n            <button className=\"toc-button\"  onClick={() => this.handlePage(7)}>\n              Method\n            </button>\n            </div></div>\n          )\n        });\n      } else {\n        fetch(\"./data/layers/\" + page + \".md\").then(res => {\n          return res.text()\n        }).then(res => {\n          this.setState({\n            pagedata: md.render(res),\n          });\n        });\n      }\n  }\n\n  render() {\n\n    if (!this.state.geodata) {\n      return <span>Waiting...</span>\n    }\n\n    const options = [\n      { value: 'gender', label: 'Gender of Interviewee' },\n      { value: 'race', label: 'Race of Interviewee' },\n      { value: 'genderi', label: 'Gender of Interviewer' },\n      { value: 'racei', label: 'Race of Interviewer' },\n      { value: null, label: '[Reset]' }\n    ];\n\n    const options_int = [\n      { value: null, label: '[Reset]' },\n      { value: 'bernicekellyharris', label: 'Bernice Kelly Harris [83]' },\n      { value: 'maryahicks', label: 'Mary A. Hicks [51]' },\n      { value: 'roseshepherd', label: 'Rose Shepherd [40]' },\n      { value: 'gracemccune', label: 'Grace McCune [39]' },\n      { value: 'sadiebhornsby', label: 'Sadie B. Hornsby [39]' },\n      { value: 'williamoforster', label: 'William O. Forster [36]' },\n      { value: 'idalmoore', label: 'Ida L. Moore [35]' },\n      { value: 'wwdixon', label: 'W.W. Dixon [25]' },\n      { value: 'adyleengmerrick', label: 'Adyleen G. Merrick [22]' },\n      { value: 'wosaunders', label: 'W. O. Saunders [21]' }\n    ];\n\n    const map = (\n      <div id=\"map-container\">\n        <Map\n          bounds={[[25.53511, -92.33793], [38.47061, -75.68696]]}\n          zoomControl={false}\n          scrollWheelZoom={false}\n          touchZoom={false}\n          minZoom={5}\n          maxZoom={10}\n          maxBounds={[[20, -95], [45, -70]]}\n          attributionControl={false}>\n          <ZoomControl\n            position='topright'\n            />\n          <Legend\n            position='bottomright'\n            color='race'\n            id=\"legend-race\"\n            />\n          <Legend\n            position='bottomright'\n            color='gender'\n            id=\"legend-gender\"\n            />\n          <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            attribution=\"\"\n            scrollWheelZoom=\"false\"\n            touchZoom=\"false\"\n            doubleClickZoom=\"false\"\n          />\n\n          {this.state.geodata.map( (val, i) => {\n\n            var tcolor = \"black\";\n            if (this.state.mapstate.value === \"race\") tcolor = val.race;\n            if (this.state.mapstate.value === \"gender\") tcolor = val.gender;\n            if (this.state.mapstate.value === \"racei\") tcolor = val.racei;\n            if (this.state.mapstate.value === \"genderi\") tcolor = val.genderi;\n\n            if (this.state.mapfilter.value !== null) {\n              if (val.ishow !== this.state.mapfilter.value) {\n                return (null)\n              }\n            }\n\n            return (\n              <div key={i}>\n              <CircleMarker\n                center={[val.lat, val.lon]}\n                radius={5}\n                color={tcolor}\n                stroke={false}\n                onClick={() => this.handleInterview(val.id)}>\n                <Tooltip direction=\"top\" offset={[0,-6]}>\n                  <b>{val.title}</b><br/>\n                  Interviewer: {val.interviewer}\n                </Tooltip>\n              </CircleMarker>\n              </div>\n            )\n          })}\n\n          <div className=\"custom-leaflet leaflet-top leaflet-right\">\n            <div className=\"custom-leaflet-inner\" >\n               <Dropdown options={options}\n                value={\n                  this.state.mapstate.value === null ?\n                  null : this.state.mapstate\n                }\n                placeholder=\"Color interviews by...\"\n                onChange={(e) => this.handleMapstateChange(e)}\n                className=\"dropdown\"\n                />\n               <Dropdown options={options_int}\n                value={\n                  this.state.mapfilter.value === null ?\n                  null : this.state.mapfilter\n                }\n                placeholder=\"Filter by interviewer...\"\n                onChange={(e) => this.handleMapfilterChange(e)}\n                className=\"dropdown\"\n                />\n            </div>\n          </div>\n        </Map>\n      </div>\n    )\n\n    return (\n    <div>\n    <div id=\"header\">\n\n      <span onClick={() => this.handlePage(0)}>\n        Voice of a Nation: Life Histories in New Deal America\n      </span>\n\n      <div className=\"btn-group\">\n        <button\n          className={this.state.page === 1 ? \"active\" : \"\"}\n          onClick={() => this.handlePage(1)}>I</button>\n        <button\n          className={this.state.page === 2 ? \"active\" : \"\"}\n          onClick={() => this.handlePage(2)}>1</button>\n        <button\n          className={this.state.page === 3 ? \"active\" : \"\"}\n          onClick={() => this.handlePage(3)}>2</button>\n        <button\n          className={this.state.page === 4 ? \"active\" : \"\"}\n          onClick={() => this.handlePage(4)}>3</button>\n        <button\n          className={this.state.page === 5 ? \"active\" : \"\"}\n          onClick={() => this.handlePage(5)}>4</button>\n        <button\n          className={this.state.page === 6 ? \"active\" : \"\"}\n          onClick={() => this.handlePage(6)}>C</button>\n        <button\n          className={this.state.page === 7 ? \"active\" : \"\"}\n          onClick={() => this.handlePage(7)}>M</button>\n        <button\n          className={this.state.page === 0 ? \"btn-text active\" : \"btn-text\"}\n          onClick={() => this.handlePage(0)}>Contents</button>\n      </div>\n    </div>\n\n    <TextBox\n      page={this.state.page}\n      pagedata={this.state.pagedata}\n      click={() => this.handlePage(0)}\n      clickmap={() => this.handleOvertypeChange(true, 'map')}\n      clicktopic={() => this.handleOvertypeChange(true, 'topic')}\n    />\n\n    <div\n      id=\"multi-container\"\n      onClick={() => this.handleOverlay(false)}\n      className={this.state.overtype ? \"\" : \"hidden-sml\"}>\n      <button\n        id=\"multi-btn-back\"\n        onClick={() => this.handleOvertypeChange(false)}>&laquo; Text</button>\n      <div\n        id=\"welcome-container\"\n        className={this.state.welcome ? \"\" : \"hidden\"}>\n        <div className=\"welcome-msg\" onClick={() => this.handleWelcome(false)}>\n          <h3>Mapping Southern Life Histories</h3>\n          <p>\n            The interactive map in this panel show over 1100 oral histories\n            by the Southern Life Histories Project from 1939 to 1941. Points\n            are mapped to where each oral history was recorded. Clicking on\n            a dot to display metadata and the text from each digitized life\n            history. Points can further colored by the demographics of the\n            interviewees from the pull down menu in the upper left-hand corner\n            of the map.\n          </p>\n          <div style={{width: \"100%\", textAlign: \"center\"}}>\n            <button onClick={() => this.handleWelcome(false)}>Enter</button>\n          </div>\n        </div>\n      </div>\n      <InterviewBox\n        interview={this.state.interview}\n        interviewdata={this.state.interviewdata}\n        interviewmedia={this.state.interviewmedia}\n        handleInterview={this.handleInterview.bind(this)}\n        handleMediaButton={this.handleMediaButton.bind(this)}\n      />\n      <TopicContainer\n        hidden={this.state.intertype !== \"topic\"}\n      />\n      <div id=\"map-container\">\n        {map}\n      </div>\n      <div className=\"overlay-btn-grp\">\n        <button\n          className={this.state.intertype === \"map\" ? \"active\" : \"\"}\n          onClick={() => this.handleIntertype(\"map\")}\n          >\n          Map\n        </button>\n        <button\n          className={this.state.intertype === \"topic\" ? \"active\" : \"\"}\n          onClick={() => this.handleIntertype(\"topic\")}\n          >\n          Topics\n        </button>\n      </div>\n    </div>\n\n    <div id=\"footer\">\n      <span id=\"authors\">T. Arnold, C. Rivard, L. Tilton</span>\n      <span id=\"notice\">Digital Project &mdash; Currently Under Review </span>\n    </div>\n\n    </div>\n    );\n  }\n}\n\n// ***************************************************************************\n// Wrap the App and return the rendered Viewer\n\nfunction App() {\n  return (\n    <Viewer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}