{"version":3,"sources":["Legend.js","layers/Layer0.js","layers/Layer1.js","layers/Layer2.js","layers/Layer3.js","layers/Layer4.js","layers/Layer5.js","layers/Layer6.js","App.js","serviceWorker.js","index.js"],"names":["Legend","props","legend","L","control","position","onAdd","div","DomUtil","create","id","names","colors","color","labels","i","length","push","innerHTML","join","map","this","leaflet","addTo","MapControl","withLeaflet","Layer0","style","paddingTop","className","onClick","handlePage","Layer1","href","Layer2","Layer3","Layer4","Layer5","Layer6","padZeros","number","pad","repeat","toString","substr","TextBox","data","page","button","clickmap","clicktopic","React","Component","InterviewBox","interview","interviewdata","response","interviewmedia","title","interviewee","interviewer","reviser","date","location","gender","race","occupation","src","type","width","height","handleMediaButton","window","open","handleInterview","alt","InterviewTopicBox","TopicCircles","val","key","num","clickfun","left","x","bottom","y","r","lineHeight","borderRadius","name","ListBar","maxval","Math","max","weights","class","titleleft","titleright","items","numcol","round","clickid","clickids","clickclass","TopicContainer","state","td","topicstate","topic","topicdoc","fetch","then","res","json","setState","value","cls","hidden","topicpart","all","handleChangeTopic","bind","description","proportion","topics","top_word","word_wgt","top_docs","doc_perc","handleChangeTopicDoc","top_docs_ids","docs","top_topics","topic_weights","top_topics_ids","header","target","rel","handleChangeTopicstate","Viewer","geodata","image","mapstate","label","mapfilter","welcome","intertype","overtype","document","getElementById","visibility","display","handleIntertype","handleWelcome","media","undefined","overlay","handleMapstateChange","handleMapfilterChange","handleOvertypeChange","Map","bounds","zoomControl","scrollWheelZoom","touchZoom","minZoom","maxZoom","maxBounds","attributionControl","ZoomControl","TileLayer","url","attribution","doubleClickZoom","tcolor","racei","genderi","ishow","CircleMarker","center","lat","lon","radius","stroke","Tooltip","direction","offset","options","placeholder","onChange","e","handleOverlay","textAlign","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.290e865c.chunk.js","sourcesContent":["import { MapControl, withLeaflet } from \"react-leaflet\";\nimport L from \"leaflet\";\n\nclass Legend extends MapControl {\n  createLeafletElement(props) {}\n\n  componentDidMount() {\n\n    const legend = L.control({ position: \"bottomright\" });\n\n    legend.onAdd = () => {\n      const div = L.DomUtil.create(\"div\", \"info legend\");\n      div.id = this.props.id;\n\n      var names = null;\n      var colors = null;\n\n      if (this.props.color === \"gender\")\n      {\n        names = [\"Female\", \"Male\", \"Unknown\"];\n        colors = [\"#56B4E9\", \"#E69F00\", \"black\"]\n      }\n      if (this.props.color === \"race\")\n      {\n        names = [\"Black\", \"White\", \"Unknown\"];\n        colors = [\"#009E73\", \"#CC79A7\", \"black\"]\n      }\n\n      let labels = [];\n\n      for (let i = 0; i < names.length; i++) {\n        labels.push(\n          '<i style=\"background:' +\n            colors[i] +\n            '\"></i> ' +\n            names[i]\n        );\n      }\n\n      div.innerHTML = labels.join(\"<br>\");\n      return div;\n    };\n\n    const { map } = this.props.leaflet;\n    legend.addTo(map);\n  }\n}\n\nexport default withLeaflet(Legend);\n","import React from 'react';\n\nfunction Layer0(props) {\n\n    // Should have access to all of these:\n    //    props.handlePage(PAGENUM)\n\n    return(\n<div>\n  <h1 style={{paddingTop: \"0px\"}}> Table of Contents </h1>\n\n  <button className=\"toc-button\" onClick={() => props.handlePage(1)}>\n    Introduction\n  </button>\n\n  <button className=\"toc-button\"  onClick={() => props.handlePage(2)}>\n    Layer 1: They Must Be Heard\n  </button>\n\n  <button className=\"toc-button\"  onClick={() => props.handlePage(3)}>\n    Layer 2: Placing the Life Histories\n  </button>\n\n  <button className=\"toc-button\"  onClick={() => props.handlePage(4)}>\n    Layer 3: Textual Analysis\n  </button>\n\n  <button className=\"toc-button\"  onClick={() => props.handlePage(5)}>\n    Conclusion\n  </button>\n\n  <button className=\"toc-button\"  onClick={() => props.handlePage(6)}>\n    Method\n  </button>\n</div>\n    )\n}\n\n\nexport {Layer0};\n","import React from 'react';\n\nfunction Layer1(props) {\n\n    return(\n<div>\n  <h1 style={{paddingTop: \"0px\"}}> Introduction </h1>\n\n<p>“The people, all the people, must be known, they must be heard,” proclaimed William T. Couch in 1939 from Chapel Hill. A respected editor turned part-time government bureaucrat, Couch served as both director of the University of North Carolina Press and the New Deal’s Federal Writers' Project (FWP) Southern Life History Project.<sup><a href=\"#ref1\" id=\"fnref1\">[1]</a></sup> As economic turmoil engulfed the nation, his concern for the voiceless led to the development of a new form of documentary expression called a “life history,” oral interviews of everyday people’s life experiences captured in writing by federal workers. Alongside cultural workers across the United States such as James Agee and Walker Evans, he shared a belief in the power of documentary expression to render visible silenced communities and to challenge depictions of southern life as antiquated, depraved, and languid. “Somehow they must be given representation,” he continued, “somehow they must be given voice and allowed to speak, in their essential character.”<sup><a href=\"#ref2\" id=\"fnref2\">[2]</a></sup> If they could speak, he reasoned, these communities could help communicate what they needed to end the Great Depression and in the process reshape how the nation understood the region and its place in American society.</p>\n<p>With the support of the New Deal, Couch led a laudatory experiment in social documentary driven by a deep passion and concern for the past, present, and future of the South. Couch’s desire to circulate working-class voices grew out of his distress over how intellectuals from academia, such as acclaimed sociologist Howard Odum, and literature, such as author Erskine Caldwell, portrayed the region. While the former reduced people to nameless statistics, the latter depicted the region as backwards, a theme federal bureaucrats drew on to argue that the region could not modernize and move out of the Great Depression. Couch believed that his new method of social documentation—conducting oral histories that were recorded only in writing—would provide a mechanism to understand the challenges of the American South as articulated by those actually grappling with the effects of industrialization and systems of economic and racial inequality. How best to capture, document, and analyze the words of the people was a contested project that placed Couch, Chapel Hill, and the New Deal at the center of debates over what counted as knowledge in the humanities and social sciences.</p>\n<p>These debates shaped Couch’s tenure as Director of Southeast Region of the Federal Writers’ Project and were the impetus behind his creation of the Southern Life Histories Project (SLHP). The SLHP was dedicated to capturing the stories of everyday Americans, especially those who had been previously marginalized from historical accounts, including African Americans, women, and working-class white men. The SLHP together with other regional units of the FWP produced nearly 10,000 interviews nationwide, constituting one of the nation's large first-person narrative collections. However, nearly 80 years later, few have ever heard of Couch’s groundbreaking project or the significant effect it had on shaping ideas of what counted as social documentation, collective memory, and regional identity.</p>\n<p><em>Voice of a Nation: Mapping Documentary Expression in New Deal America</em> recovers the history of the Southern Life History Project (SLHP) through an interdisciplinary approach that combines close readings of archival material with computational methods that analyze the collection at scale. The project centers addresses six questions: what were the motivating factors behind the creation of the SLHP? How did the SLHP come into formation? Who was represented in the life histories? Why were they represented? How were they represented, and what are the legacies of the SLHP? The answers to these questions demonstrate key points in this struggle over what counted as social knowledge, how to accurately represent social conditions, who could produce such knowledge, and who is and is not represented.</p>\n<p>Questions concerning how to document social conditions most accurately - including what gets counted as objective evidence, who are legitimate researchers, and how findings should be written - dominated debates in the 1920s and 1930s. The stakes heightened with the onset of the Great Depression as intellectuals moved between the academy and New Deal state to identify and develop solutions. Concerns that the methods and output of social science research obscure the voices of the people being studied animated debates in the 1920s and 1930s when the social sciences were forging and institutionalizing their methodological toolkit. Such debates were also not limited to the northeast or in Chicago as some accounts argue, but deliberated by universities in the South, particularly at the University of North Carolina-Chapel Hill, which were in the process of transforming into research institutions. While the form of life histories were dismissed as too qualitative by scholars like Howard Odum, the writers’ education, gender and familiarity with the communities that they were documenting contributed to positioning these life histories as stories rather than scholarly evidence. As a result, the life histories would not garner a reputation as authentic, scholarly knowledge from academia in the 1930s but become a foundation of the oral history two decades later.</p>\n<p>As debates ensued over the methods, the FWP forged ahead with life histories creating over 1,200 interviews for the Southern Life History Project. By revealing that the SLHP focused on groups such as factory workers, mill workers, and tenant farmers in rural towns, we argue that the SLHP positioned southern laborers as perceptive about their conditions, hard working, and shaped by the past as well as the present rather than replicating stereotypes about the region as uneducated, lazy, and backwards. In the process, the audience for the life histories comes into focus. By centering the hardships of the white working class through first person narrative stories that emphasized the emotional realities of the everyday experience, the white working class became the voices of the South for middle and upper class white readers primarily residing on the east coast. At the same time that these stories complicated earlier narratives, they simultaneously erased the brutality of segregation and the effects of slavery by omitting stories that addressed such important issues, thereby reifying cultural and structural racism.</p>\n<p><em>Voice of a Nation</em> is organized into layers that can be read independently or together. Layer 1-2 uncovers the history of the SLHP by centering Chapel Hill in debates over sociological knowledge production and how to define the South during the early 1900s. Specifically, Layer 2 recovers the history of the SLHP and why the project offered a new method called life histories for documenting social conditions. Through visual and textual forms of argument, Layer 3 turns to the politics of representation in the SLHP by combining spatial and textual analysis with archival research. After visualizing the geographical reach of the SLHP in Layer 3, we turn to the how the subjectivities of the interviewees and interviewers shaped who, why and how people were represented in Layer 4. The Conclusion draws on all four layers to reveal how the SLHP centered the white working class as the voice of the South.</p>\n<p>In aggregate, the project demonstrates an entangled story about how the life histories as a new form of documentary evidence concerned with capturing authenticity contested existing approaches to producing sociological knowledge and public memory; the role that gender, class, and race played in negotiating these new methods; and, how this genre of social documentary helped to shape notions of what it meant to be an American and a Southerner during a time of political, social and economic unrest. While we address these themes, there are many exciting directions to take to understand these SLHP, which you can see by moving through exploratory interfaces or by analyzing the <em>List Histories Data Set</em>. We invite you to pose and answer questions of your own. We hope that by moving through this digital text, you see how our argument unfolds in new ways made possible by combining innovations in methods with new affordances of the digital medium.</p>\n\n\n  <h3>References</h3>\n\n  <p id=\"ref1\">[1] Rubenstein DeMasi, Susan (2016). <em>Henry Alsberg: The Driving Force of the New Deal's Federal Writer's Project.</em> Jefferson, NC: McFarland and Co. pp. 200–202.<a href=\"#fnref1\">↩</a></p>\n\n  <p id=\"ref2\">[2] William Terry Couch, ed., <em>These Are Our Lives</em> (University of North Carolina Press, 1939).<a href=\"#fnref2\">↩</a></p>\n\n</div>\n    )\n}\n\n\nexport {Layer1};\n","import React from 'react';\n\nfunction Layer2(props) {\n\n    return(\n<div>\n  <h1 style={{paddingTop: \"0px\"}}> Layer 1: They Must Be Heard </h1>\n\n  <p>The first layer of our digital manuscript explains why and how the SLHP came into formation. It situates the University of North Carolina-Chapel Hill as the epicenter of debates about how to create sociological knowledge through efforts to identify and address the problems of the South during the 1920s and 1930s. It then recovers the political and cultural history that facilitated the creation of the SLHP as a project of the FWP under UNC Press Editor Couch.</p>\n  <p>The layer is divided into sections. It begins with how the 1920s and 1930s cemented the University of North Carolina as a center of social science about the region at a time when the South was under a microscope for its economic precarity and social order. The desire to identify and address the problems of the South came as the institution of higher education aspired to become a national research university and thought leader on the region, which was signaled by two increasingly prestigious  institutional units: UNC Press and the Institute for Research in Social Sciences (IRSS). William “Bill” Couch, who took the reins of UNC Press in 1925 and became Director in 1932, published work that did not shy away from addressing the region’s problems in turn demonstrating that reflexive, critical scholarship could come from within the region.</p>\n  <p>We then turn to how the stakes of the debate about how to represent the South heightened with the Great Depression, which placed the American South under a microscope. The region’s economic precarity combined with a culture of segregation further cemented the region’s reputation as anti-modern, backwards, and impervious to progress; questions about the region’s fitness for full inclusion and citizenship abounded. How to assess and represent the challenges of the region became a central concern. Two warring schools of intellectual thought framed the academic and literary representations of the South. The Agrarians, based at Vanderbilt University, romanticized a return to White rural, folk culture arguing sociological scholarship aided in the erosion of Southern traditional values. Howard Odum and his UNC-Chapel Hill colleagues, on the other hand, advocated for systematic, scientific studies of the region through fieldwork conducted by experts so that solutions to social problems could be identified. The evidence constructed a region that was distinct due to its regional culture but also a part of modernity and therefore the nation, earning them a reputation as advocates for “the New South”. These debates did not only play out in the academic and literary marketplace, but within the federal government as well.</p>\n  <p>Next we reveal the critical role the federal government played in launching the SLHP. Part employment project and part laudatory experiment in federal support of cultural work, New Deal agencies such as the FWP pursued documentary projects and entered the fore over how to document and communicate the “real” conditions of people in the U.S.  Who should be documented, how they should be documented, and why they should be documented were key questions that animated the New Deal as well as Couch and Odum. While Couch and Odum worked closely together as UNC Press regularly pushed work by Odum’s IRSS Institute, Couch questioned if the academic prose driven by statistics that was becoming the norm for Sociology could communicate the challenges of the region to scholarly and popular audiences. He worried that such writing less accurately represented the actual lives of those being documented. With the support of the FWP’s Director Henry Alberg, Couch officially launched the life histories project upon being named the FWP’s Regional Director of the Southeastern region in 1938. With one foot in the federal government, which lent him the authority to pursue his new approach to documenting social conditions, and one foot in academia, as the director of the South’s most prominent press, Couch built the SLHP. </p>\n  <p>We then turn to the aims of the SLHP. The method of “life histories” was an intentional intervention in debates about what counted as sociological knowledge during the era. Debates over how to capture and document social life abounded —whether through numbers and statistics in sociology, ethnographies from anthropology, first-hand stories through folklore, or through the increasingly broad category of “documentary.”  Couch conceptualized “life histories” as a more authentic form of documentation that amplified the voice of the interviewee. By recording these memories in the form of life histories, the project created a new method of collecting evidence about past and present social conditions by giving the people who were the subject of the sociological gaze of academics and the New Deal state a voice in the process rather than privileging sociological experts’ statistics or reducing their lives to romanticized folkways through folklore. Through narratives that emphasized qualitative rather than quantitative ways of knowing, readers could then more accurately and realistically access individuals’ experiences, which in turn served as a gateway to larger truths about Southern society. By tracking how the SLHP enacted this new method, we reveal how life histories made claims to authenticity, which on the one had worked against problematic stereotypes about work and labor in the region, while simultaneously reinscribed commonplace, problematic notions of race.</p>\n  <p>We conclude the layer by investigating how Couch set-up the SLHP within the institutional structure of the FWP. Because writers were hired at the state level, he sent unemployed white-collar workers throughout their state to interview fellow Southerners about their lives and thereby shape Southern identities through their own words. As part of the Works Progress Administration (WPA), the life histories were collected by writers with varying levels of expertise, including creative writers, journalists, educators, and some who just marked ‘writing experience’ on their WPA applications. Writers, most of whom were White women, were sent out to different locations with an outline to follow when conducting interviews. However, they were given permission to diverge from the outline when necessary, because “the stories will not be usable if they are constructed on a rigid pattern,” Couch argued.  According to his instructions, their goal was “accuracy, human interest, social importance, and literary excellence,” which was to be achieved by telling the story “in the words of the persons who are consulted.”  At stake was method as well as power relations between intellectuals, academic disciplines, and the New Deal state. At the heart of this struggle were the actual people who were the subject of the documentary work to which the following layers will turn.</p>\n  <p>Note about the digital layout for Layer 1: When the user selects Layer 1, they will see the text on the left-hand side and map on the right-hand side. This is the same as the Introduction (Figure 2). Because Layer 1 does address SLHP topics and themes, there will be hyperlinks in those sections to the topic model. When a user clicks on the link, the right side will toggle over to the “Topics” (Figure 6 and Figure 8). The radio button for “Map” and “Topics” always remain on the right side, so the user can toggle between the two as they see fit. </p>\n\n\n</div>\n    )\n}\n\n\nexport {Layer2};\n","import React from 'react';\n\nfunction Layer3(props) {\n\n    return(\n<div>\n  <h1 style={{paddingTop: \"0px\"}}> Layer 2: Placing the Life Histories </h1>\n\n  <p>In Layer 2, we begin our turn to an analysis of the politics of representation of the SLHP through digital methods. While Layer 1 was dominated by a narrative built on archival material sharing the early history of the SLHP, the focus of Layer 2 is on using metadata from the archival material to spatially analyze the collection. With the help of an interactive map, we show the ways in which these life histories were ensconced in stories of place—a distinctly Southern space that Couch believed would help a national readership re-imagine Southern laborers as perceptive about their conditions, hard-working, and shaped by the past as well as the present rather than defined by stereotypes of the region as uneducated, lazy, and backwards. </p>\n  <p>Reading the life histories through a spatial context allows users to see which geographic areas received the greatest representation. Interviews were conducted in states such as Alabama, South Carolina, and Virginia showing a concerted effort to document across the American South. The emphasis on Southeastern states also reveals the continued importance of and process of regional identity construction. Couch sought to use these place-based stories to challenge stereotypes of the region as socially and culturally regressive in order to position the South as a productive contributor to American society and therefore a benefit to the nation. Simultaneously, they reified regionalism by constructing the South geographically as the Southeastern states from Louisiana to Alabama and North Carolina to Florida showing national identity and regional particularities could be mutually reinforcing. </p>\n  <p>At the same time, the cluster of interviews in North Carolina reveals the centrality the coastal state played in the documentary record. Interviews conducted in North Carolina constitute nearly 50% of the collection, which demonstrates the effect of Couch’s struggles to convince other states to participate. This is further evidenced by letters within the archival record. Moreover, the mapped data reveals that interviewers primarily visited small towns and rural areas, albeit only those surrounding metropolitan centers, which evidences Couch’s desire to raise the status of the rural South and the laborers within what he saw as exploitative systems such as mill work and tenant farming. Efforts to elevate the rural South came at a time of great anxiety that industrialization and migration were destroying local rural culture. The life histories sought to show how rural life was still foundational to Southern social life and identity rather than position these communities as economically and socially behind the times. While such an effort could have been the Agrarian’s dream, the life histories were not designed to romanticize agrarian labor but rather demonstrated the ways that the tenant farming system exploited laborers and served as a critique of industrial capitalism. </p>\n  <p>We conclude by looking at how writers engaged with interviewees. Labeled by scholars as the “documentary decade,” the 1930s was a period in which cultural workers experimented with forms of documentary representation. As Farm Security Administration photographers such as Dorothea Lange pointed her camera at migrant farmers, life history writers such as Bernice Harris wrote the stories of tenant farmers. SLHP writers spent hours in people's homes chronicling their interviewee's lived experiences tasked with instructions from Couch that required them to write stories that would be “photographic in accuracy.” However, the instructions simultaneously demanded that writers should maintain authenticity by making sure the stories were simply told with interviewees speaking for themselves. These seemingly contradictory instructions that demanded the writers’ detached narrator description and at the same time the interviewee’s own voice were executed by writers with varying skill levels, proclivity for genres as well as personal prejudices. The result was uneven texts that give as much and likely more insight into the subjectivity of the writers than the subjectivity of the interviewees. We draw on scholars of the ethnographic and documentary encounter to explain how these interactions were an active, real-time negotiation that was shaped and reshaped by the positionality and subjectivity of the interviewer and interviewee. </p>\n  <p>While seldom acknowledged, our data demonstrates that women were in fact central to the project. At a time when women were often relegated to the domestic sphere, the SLHP employed over ten women who set out across the South to record people’s stories. Their employment was not only a part of a shift in labor practices that would accelerate during World War II but aligned with the ideals, albeit rarely fully realized, of New Deal liberalism. The interviewers sought women’s stories guaranteeing representation in the documentary record and therefore inclusion into the national documentary record. Women discussed a range of themes such as domestic life and labor. Because of their gendered positionality, they also had unique access as women spoke with a level of candor reserved for those who they perceived as sharing a similar experience and sensibility. As a result, interviewees broached issues such as domestic abuse and prostitution offering a rare glimpse into taboo topics that shaped women’s daily lives, often as societal open secrets but culturally silenced. Moreover, this same positionality perceived as less threatening also resulted in women writers being sent to interviewee communities in marginalized positions including African Americans as well as immigrant classes that were not yet read as fully White. As a result, the vast majority of the life histories were written by women. While the SLHP offered some possibilities for new writers to enter the workforce, others were foreclosed. The SLHP hiring of exclusively White women, which reified segregationist economic practices, meant people of color and particularly women of color continued to be marginalized.</p>\n  <p>Note about the digital layout for Layer 2: When the user selects Layer 2, they will see the text on the left-hand side and map on the right-hand side. This is the same as the Introduction (Figure 2) and Layer 1.  </p>\n\n</div>\n    )\n}\n\nexport {Layer3};\n","import React from 'react';\n\nfunction Layer4(props) {\n\n    return(\n<div>\n  <h1 style={{paddingTop: \"0px\"}}> Layer 3: Textual Analysis </h1>\n\n  <p>\nThe third and final layer builds on location and identity data by analyzing how the people and places were represented in the life histories. The layer brings together the metadata analysis with text analysis of the entire SLHP archive. The layer contains two major sections. The first uses topic modeling paired with metadata analysis and close reading to interrogate key themes discussed throughout the life histories; the second focuses on the impact of writing styles and rhetorical structures on representational practices.\n  </p>\n\n  <p>\nThrough topic modeling of the corpus of all life histories, a number of important themes emerge to reveal central insights about notions of work, cultural memory, domestic life, education, and health concerns. Like Layer 3, this layer is designed to be interactive and exploratory, allowing audiences to move between topic models and the interviews themselves. For example, a reader-user can select a theme such as “tenant farming” and “mill workers” to see which interviews conducted by which interviewers and where are connected to the same theme. The reader then will be able to click through to the interview and explore the topic as discussed in the life history. They will also see which other topics the interview is associated with offering other themes to explore.\n  </p>\n\n  <p>\nAt the same time, the textual argument articulates the significance of each topic cluster for understanding themes that run throughout the corpus. For instance, one set of topics demonstrate key themes relating to the relationship between national identity and memory that are centrally important to social history. Topics such as the Civil War and slavery emerged. The weight of these topics demonstrate a major impulse behind the documentary project—to record important memories relating to national history before they disappeared as those who had lived through the Civil War and slavery were dying of old age. Another set of topics reveal the life histories significant focus on economics and labor and how the kinds of labor such as tenant farming and mill work reflected major concerns of the New Deal state.\n  </p>\n\n  <p>\nThe life histories have been variously classified as first-person narratives,<sup><a href=\"#ref1\" id=\"fnref1\">[1]</a></sup> conversational narratives,<sup><a href=\"#ref2\" id=\"fnref2\">[2]</a></sup> and modeled after travel literature and ethnography.<sup><a href=\"#ref3\" id=\"fnref3\">[3]</a></sup> Through computational text analysis, we measure the frequency of certain rhetorical devices and compare them with demographic information relating to interviewees and interviewers to reveal the ways in which specific rhetorical conventions were used to signify authenticity, most prominently through the representation of racial difference. For example, our analysis reveals information relating to the relationship between race and dialect. Because the Federal Writers’ Project wanted to portray the life histories as realistic to their perceived audience (white, book readers), they created rules around documenting speech patterns through writing practices, which included written dialect. Many scholars have noted that while this rule should have been employed for all interviewees, it was mostly applied to African Americans, which is why Toni Morrison calls this speech “eye dialect.” She argues that this writing practice “‘relies on phonetic spellings and apostrophes to make visible to the eye sounds that cannot be heard in the medium of print,’” thereby rendering “‘the speech of black characters ‘as an alien, estranging dialect made deliberately unintelligible by spellings contrived to defamiliarize it.’”<sup><a href=\"#ref4\" id=\"fnref4\">[4]</a></sup>\n  </p>\n\n  <p>\nWhile scholars have noticed this perceived pattern of using such dialect with African American stories, there has never been a systematic analysis of the entire corpus. Catherine Stewart explains, “scholars have yet to examine how white FWP interviewers chose to hear black speech and black testimony and how, as the transcribers of these stories, they interpreted and represented the black vernacular and the tales themselves.”<sup><a href=\"#ref5\" id=\"fnref5\">[5]</a></sup> Through our approach, we are able to complete such an examination, and have demonstrated that written dialect was used in approximately 85% of African American interviewees as compared to 45% of white interviewees. Such data can then be further parsed by gender, geographical origin, and topics discussed, thus shedding light on how rhetorical conventions and identity representation mixed to inform the development of social realism as a documentary genre. Just as in section 1, reader-users will be able to move between the data visualizations together with the corresponding textual arguments. Most provocatively, we suggest that these different and at times conflicting writing styles demonstrate how the positionality of writers affected the content. We argue that the ways in which the life histories revealed the subjective nature of the documentary process is likely what led the new approach of documentation to be seen as ameutrish and not fit to be included as an academic method in the eyes of other scholars such as Howard Odum. The interviews could not be considered objective evidence necessary for the professionalization of disciplines seeking to position themselves within the evolving rhetoric of scientific discourse.\n  </p>\n\n  <h3>References</h3>\n\n  <p id=\"ref1\">[1] Banks, Rapport, and Federal Writers’ Project, <em>First-Person America</em>. <a href=\"#fnref1\">↩</a></p>\n  <p id=\"ref2\">[2] Jerrold Hirsch, <em>Portrait of America: A Cultural History of the Federal Writers’ Project: A Cultural History of the Federal Writers’ Project</em> (Univ of North Carolina Press, 2003) <a href=\"#fnref2\">↩</a></p>\n  <p id=\"ref3\">[3] Stewart, <em>Long Past Slavery</em> <a href=\"#fnref3\">↩</a></p>\n  <p id=\"ref4\">[4] Stewart, 79. <a href=\"#fnref4\">↩</a></p>\n  <p id=\"ref5\">[5] Stewart, 5–6. <a href=\"#fnref5\">↩</a></p>\n\n</div>\n    )\n}\n\n\nexport {Layer4};\n","import React from 'react';\n\nfunction Layer5(props) {\n\n    return(\n<div>\n  <h1 style={{paddingTop: \"0px\"}}> Conclusion </h1>\n\n  <p>\nIn the conclusion we unite the close archival analysis of Layers 1 and 2, the spatial analysis of Layer 3, and the textual analysis of Layer 4 to reflect on the legacies of the SLHP. Pulling together each of the Layers, we show how and why the project attempted to shape cultural memory and the telling of history. By placing the oral histories as a novel, alternative method of social documentation, we place the work of the SLHP within the long history of grappling with what “counts” as social knowledge, how to accurately represent social conditions, who could produce such knowledge, and who is and is not represented.\n  </p>\n\n</div>\n    )\n}\n\n\nexport {Layer5};\n","import React from 'react';\n\nfunction Layer6(props) {\n\n    return(\n<div>\n  <h1 style={{paddingTop: \"0px\"}}> Method </h1>\n\n  <p>\nThe final section presents a discussion of our methodology for building the digital project. We begin by outlining the decisions made in building our textual corpora, the Life Histories Data Set. We make explicit our decisions regarding metadata such as gender and race. We then turn to the design principles inherent in our mapping process, form aesthetic decisions such as color pallets through technical decisions about technologies would be best able to visualize the data. Finally, we document the text analysis methods used throughout Layer 4.\n  </p>\n\n</div>\n    )\n}\n\n\nexport {Layer6};\n","import React from 'react';\nimport Dropdown from 'react-dropdown';\n\nimport {\n  Map, CircleMarker, TileLayer, ZoomControl, Tooltip\n} from 'react-leaflet';\nimport Legend from \"./Legend\";\nimport { Layer0 } from \"./layers/Layer0\";\nimport { Layer1 } from \"./layers/Layer1\";\nimport { Layer2 } from \"./layers/Layer2\";\nimport { Layer3 } from \"./layers/Layer3\";\nimport { Layer4 } from \"./layers/Layer4\";\nimport { Layer5 } from \"./layers/Layer5\";\nimport { Layer6 } from \"./layers/Layer6\";\n\nimport 'leaflet/dist/leaflet.css';\nimport 'react-dropdown/style.css';\nimport './reset.css';\nimport './App.css';\n\n// ***************************************************************************\n// Helper function(s)\n\nfunction padZeros(number, pad) {\n    return (\"0\".repeat(pad) + number).toString().substr(-pad, pad);\n}\n\n// ***************************************************************************\n// Return the text box\n\nclass TextBox extends React.Component {\n\n  render() {\n\n    // *************************************************************\n    var data = null;\n    if (this.props.page === 0)\n    {\n      data = <Layer0\n        handlePage={this.props.handlePage}\n      />;\n    }\n    if (this.props.page === 1)\n    {\n      data = <Layer1\n        handlePage={this.props.handlePage}\n      />;\n    }\n    if (this.props.page === 2)\n    {\n      data = <Layer2\n        handlePage={this.props.handlePage}\n      />;\n    }\n    if (this.props.page === 3)\n    {\n      data = <Layer3\n        handlePage={this.props.handlePage}\n      />;\n    }\n    if (this.props.page === 4)\n    {\n      data = <Layer4\n        handlePage={this.props.handlePage}\n      />;\n    }\n    if (this.props.page === 5)\n    {\n      data = <Layer5\n        handlePage={this.props.handlePage}\n      />;\n    }\n    if (this.props.page === 6)\n    {\n      data = <Layer6\n        handlePage={this.props.handlePage}\n      />;\n    }\n    // *************************************************************\n\n    var button = null;\n    if (this.props.page !== 0)\n    {\n      button = (<button\n        id=\"text-btn-back\"\n        onClick={() => this.props.handlePage(0)}>&laquo; Back</button>)\n    }\n\n    return(\n      <div id=\"textbox\">\n        {button}\n        <button\n          id=\"text-btn-map\"\n          onClick={this.props.clickmap}>Map&raquo;</button>\n        <button\n          id=\"text-btn-topic\"\n          onClick={this.props.clicktopic}>Topics&raquo;</button>\n        {data}\n      </div>\n    )\n  }\n}\n\n// ***************************************************************************\n// Class to hold all of the data about a specific interview\n\nclass InterviewBox extends React.Component {\n\n  render() {\n\n    if ((this.props.interview < 0) | !this.props.interviewdata)\n    {\n      return(\n          <div id=\"interview-container\" className=\"hidden\">\n          </div>\n      )\n    }\n\n    var response = null;\n    if (this.props.interviewmedia === \"meta\")\n    {\n      response = (\n        <ul>\n          <li>\n            Title: <span>{this.props.interviewdata.title}</span>\n          </li>\n          <li>\n            Interviewee(s): <span>{this.props.interviewdata.interviewee}</span>\n          </li>\n          <li>\n            Interviewer(s): <span>{this.props.interviewdata.interviewer}</span>\n          </li>\n          <li>\n            Reviser(s): <span>{this.props.interviewdata.reviser}</span>\n          </li>\n          <li>\n            Date: <span>{this.props.interviewdata.date}</span>\n          </li>\n          <li>\n            Location: <span>{this.props.interviewdata.location}</span>\n          </li>\n          <li>\n            Gender (Interviewee): <span>{this.props.interviewdata.gender}</span>\n          </li>\n          <li>\n            Race (Interviewee): <span>{this.props.interviewdata.race}</span>\n          </li>\n          <li>\n            Occupation: <span>{this.props.interviewdata.occupation}</span>\n          </li>\n        </ul>\n      )\n    } else {\n      response = (\n        <embed\n          src={\"./data/pdfs/03709_\" + padZeros(this.props.interview, 4) + \".pdf\"}\n          type=\"application/pdf\"\n          width=\"100%\"\n          height=\"400px\"/>\n      )\n    }\n\n    return(\n      <div id=\"interview-container\">\n        <div className=\"interview-meta\">\n          <h3>Interview #{this.props.interviewdata.id}</h3>\n          <div className=\"interview-btn-grp\">\n            <button\n              onClick={() => this.props.handleMediaButton('meta')}\n              className={this.props.interviewmedia === \"meta\" ? \"active\" : \"\"}>\n              metadata\n            </button>\n            <button\n              onClick={() => this.props.handleMediaButton('pdf')}\n              className={this.props.interviewmedia === \"pdf\" ? \"active\" : \"\"}>\n              pdf\n            </button>\n            <button\n              onClick={() => {\n                window.open(\"./data/pdfs/03709_\" +\n                  padZeros(this.props.interviewdata.id, 4) + \".pdf\")\n              }}>\n              pdf (download)\n            </button>\n            <button\n              onClick={() => {\n                window.open(\"./data/xml/interview_\" +\n                  padZeros(this.props.interviewdata.id, 4) + \".xml\")\n              }}>\n              xml\n            </button>\n            <button\n              onClick={() => {\n                window.open(\"./data/text/interview_\" +\n                  padZeros(this.props.interviewdata.id, 4) + \".txt\")\n              }}>\n              text\n            </button>\n          </div>\n          <hr width=\"100%\"/>\n          {response}\n          <img\n            className=\"svg-close\"\n            src=\"static/close-black.svg\"\n            width=\"20\"\n            height=\"20\"\n            onClick={() => this.props.handleInterview(-1)}\n            alt=\"\"/>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass InterviewTopicBox extends React.Component {\n\n  render() {\n\n    if (!this.props.interviewdata)\n    {\n      return null\n    }\n\n    return(\n      <div className=\"topic-meta\">\n        <div className=\"interview-btn-grp\">\n          <button\n            onClick={() => window.open(\"./data/pdfs/03709_\" +\n              padZeros(this.props.interviewdata.id, 4) + \".pdf\")}>\n            pdf\n          </button>\n          <button\n            onClick={() => {\n              window.open(\"./data/xml/interview_\" +\n                padZeros(this.props.interviewdata.id, 4) + \".xml\")\n            }}>\n            xml\n          </button>\n          <button\n            onClick={() => {\n              window.open(\"./data/text/interview_\" +\n                padZeros(this.props.interviewdata.id, 4) + \".txt\")\n            }}>\n            text\n          </button>\n        </div>\n        <ul>\n          <li>\n            Title: <span>{this.props.interviewdata.title}</span>\n          </li>\n          <li>\n            Interviewee(s): <span>{this.props.interviewdata.interviewee}</span>\n          </li>\n          <li>\n            Interviewer(s): <span>{this.props.interviewdata.interviewer}</span>\n          </li>\n          <li>\n            Reviser(s): <span>{this.props.interviewdata.reviser}</span>\n          </li>\n          <li>\n            Date: <span>{this.props.interviewdata.date}</span>\n          </li>\n          <li>\n            Location: <span>{this.props.interviewdata.location}</span>\n          </li>\n          <li>\n            Gender (Interviewee): <span>{this.props.interviewdata.gender}</span>\n          </li>\n          <li>\n            Race (Interviewee): <span>{this.props.interviewdata.race}</span>\n          </li>\n          <li>\n            Occupation: <span>{this.props.interviewdata.occupation}</span>\n          </li>\n        </ul>\n      </div>\n    )\n  }\n}\n\n// ***************************************************************************\n// Class to hold the topic model\n\nfunction TopicCircles(props) {\n  return(\n    <div className=\"topic-circle-container\">\n      {props.data.map( (val, i) => {\n        return(\n          <div\n            key={val.num}\n            className=\"topic-circle\"\n            onClick={() => props.clickfun(i)}>\n            <div\n              className=\"topic-circle-inner\"\n              style={{\n                left: val.x + \"%\",\n                bottom: val.y + \"%\",\n                width: (val.r * 2) + \"px\",\n                height: (val.r * 2) + \"px\",\n                lineHeight: (val.r * 2) + \"px\",\n                borderRadius:val.r + \"px\"\n              }}>\n              <span>{val.num}</span>\n            </div>\n            <div\n              className=\"topic-circle-overlay\"\n              style={{\n                left: val.x + \"%\",\n                bottom: val.y + \"%\",\n                width: (val.r * 2) + \"px\",\n                height: (val.r * 2) + \"px\",\n                lineHeight: (val.r * 2) + \"px\",\n                borderRadius:val.r + \"px\"\n              }}>\n              <span>{val.name}</span>\n            </div>\n          </div>\n        )\n      })}\n\n    </div>\n  )\n}\n\nfunction ListBar(props) {\n  var maxval = Math.max(...props.weights);\n  var weights = props.weights.map(val => {\n    return(100 * val / maxval)\n  })\n\n  return(\n    <div\n      className={\"topic-list-container\" + props.class}\n      style={{width: props.width}}>\n      <div className=\"topic-list-title\">\n        <span>{props.title}</span>\n      </div>\n      <div className=\"topic-list-row topic-list-row-head\">\n        <span>{props.titleleft}</span>\n        <span>{props.titleright}</span>\n      </div>\n      {props.items.map( (val, i) => {\n        var numcol = null;\n\n        if (props.numcol) {\n          numcol = (\n            <div className=\"topic-list-percent\">\n              <span>{Math.round(props.weights[i]) + \"%\"}</span>\n            </div>\n          )\n        }\n\n        var clickid = i;\n        if (props.clickids) {\n          clickid = props.clickids[i];\n        }\n\n        var clickfun = props.clickfun;\n        var clickclass = \"topic-list-row\";\n        if (!clickfun) {\n          clickfun = function() {};\n          clickclass = \"topic-list-row noclick\"\n        }\n\n        return(\n          <div\n            className={clickclass}\n            key={i}\n            onClick={() => clickfun(clickid)}\n            >\n            <div\n              className=\"topic-list-text\">\n              <span>{val}</span>\n            </div>\n            {numcol}\n            <div className=\"topic-list-size\">\n              <div\n                className=\"topic-list-inner\"\n                style={{width: weights[i] + \"%\"}}>\n              </div>\n            </div>\n          </div>\n        )\n      })}\n\n    </div>\n  )\n}\n\nclass TopicContainer extends React.Component {\n\n  // Override two standard methods of React.Component //\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      td: null,\n      interviewdata: null,\n      interviewmedia: 'meta',\n      topicstate: 'grid',\n      topic: 0,\n      topicdoc: 0\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"./data/topicdata.json\").then(res => {\n      return res.json()\n    }).then(res => {\n      this.setState({\n        td: res,\n      });\n    });\n  }\n\n  handleChangeTopic(topic) {\n    this.setState({\n      topic: topic,\n      topicstate: 'topic',\n    });\n  }\n\n  handleChangeTopicDoc(topicdoc) {\n    this.setState({\n      topicdoc: topicdoc,\n      topicstate: 'doc',\n    });\n\n    fetch(\"./data/interviews/\" + topicdoc + \".json\").then(res => {\n      return res.json()\n    }).then(res => {\n      this.setState({\n        interviewdata: res,\n      });\n    });\n  }\n\n  handleChangeTopicstate(value) {\n    this.setState({\n      topicstate: value,\n    });\n  }\n\n  handleMediaButton(value) {\n    this.setState({\n      interviewmedia: value,\n    });\n  }\n\n  render() {\n\n    if (!this.state.td) {\n      return <span>Waiting...</span>\n    }\n\n    const cls = this.props.hidden ? \"topic-hide\" : \"\";\n\n    var topicpart = null;\n    if (this.state.topicstate === \"grid\") {\n      topicpart = (\n        <div className=\"topic-part\">\n          <TopicCircles\n            data={this.state.td.all}\n            clickfun={this.handleChangeTopic.bind(this)}\n          />\n        </div>\n      );\n    }\n    if (this.state.topicstate === \"list\") {\n      topicpart = (\n        <div className=\"topic-part\">\n          <ListBar\n            titleleft=\"topic\"\n            titleright=\"proportion of corpus\"\n            items={this.state.td.all.map(val => {return(val.description)})}\n            weights={this.state.td.all.map(val => {return(val.proportion)})}\n            width=\"600px\"\n            clickfun={this.handleChangeTopic.bind(this)}\n            numcol={true}\n            class=\"\"\n          />\n        </div>\n      );\n    }\n    if (this.state.topicstate === \"topic\") {\n      topicpart = (\n        <div className=\"topic-part\">\n          <div style={{width: '900px'}}>\n          <ListBar\n            title=\"Associated Words\"\n            titleleft=\"word\"\n            titleright=\"proportion of corpus\"\n            items={this.state.td.topics[this.state.topic].top_word}\n            weights={this.state.td.topics[this.state.topic].word_wgt}\n            width=\"250px\"\n            numcol={false}\n            class=\"\"\n          />\n          <ListBar\n            title=\"Associated Interviews\"\n            titleleft=\"interview\"\n            titleright=\"proportion in topic\"\n            items={this.state.td.topics[this.state.topic].top_docs}\n            weights={this.state.td.topics[this.state.topic].doc_perc}\n            width=\"400px\"\n            clickfun={this.handleChangeTopicDoc.bind(this)}\n            clickids={this.state.td.topics[this.state.topic].top_docs_ids}\n            numcol={true}\n            class=\" topic-list-two\"\n          />\n          </div>\n        </div>\n      );\n    }\n    if (this.state.topicstate === \"doc\") {\n      topicpart = (\n        <div>\n          <InterviewTopicBox\n            interview={this.state.interview}\n            interviewdata={this.state.interviewdata}\n            interviewmedia={this.state.interviewmedia}\n            handleMediaButton={this.handleMediaButton.bind(this)}\n          />\n          <div className=\"topic-part\">\n            <ListBar\n              titleleft=\"Topic\"\n              titleright=\"proportion of document\"\n              items={this.state.td.docs[this.state.topicdoc].top_topics}\n              weights={this.state.td.docs[this.state.topicdoc].topic_weights}\n              clickfun={this.handleChangeTopic.bind(this)}\n              clickids={this.state.td.docs[this.state.topicdoc].top_topics_ids}\n              width=\"300px\"\n              numcol={true}\n              class=\"\"\n            />\n          </div>\n        </div>\n      );\n    }\n\n    var header = \"Topics\";\n    var description = null;\n    if (this.state.topicstate === \"grid\") {\n      header = \"Topics — Plot\";\n      description = (\n        <p>\n          In order to identify themes across the corpus of oral interviews we\n          have applied a computational model called\n          <a href=\"https://en.wikipedia.org/wiki/Latent_Dirichlet_allocation\" target=\"_blank\" rel=\"noopener noreferrer\"> latent Dirchlet allocation (LDA)</a>.\n          The model has identified 16 topics&mdash;groups of weighted words&mdash;that it\n          has determined have some themetical similarity. In the box below, each\n          topic is represented by a bubble. Topics that share common words are\n          displayed near each other; topics with more documents are displayed\n          with larger bubble sizes. Hovering over a topic will display the, manually\n          assigned, name of the topic. Clicking on a topic will open a\n          description of the topic itself. You can also\n          <span onClick={() => this.handleChangeTopicstate(\"list\")}> view the topics as a list</span>.\n        </p>\n      );\n    }\n    if (this.state.topicstate === \"list\") {\n      header = \"Topics — List\";\n      description = (\n        <p>\n          In order to identify themes across the corpus of oral interviews we\n          have applied a computational model called\n          <a href=\"https://en.wikipedia.org/wiki/Latent_Dirichlet_allocation\" target=\"_blank\" rel=\"noopener noreferrer\"> latent Dirchlet allocation (LDA)</a>.\n          The model has identified 16 topics&mdash;groups of weighted words&mdash;that it\n          has determined have some themetical similarity. In the table below, each\n          topic is displayed along with its five most strongly associated words\n          You can also\n          <span onClick={() => this.handleChangeTopicstate(\"grid\")}> view the topics as a plot </span>\n          that visualizes the semantic relationships between topics.\n        </p>\n      );\n    }\n    if (this.state.topicstate === \"topic\") {\n      header = \"Topic \" + (this.state.topic + 1);\n      description = (\n        <p>\n          Details of this topic, as identified by LDA, are shown below. Every\n          word in the corpus is given a score relative to each topic, and the\n          table on the left shows those words most strongly associated with\n          this topic. Similarly, each document is broken down into a score\n          across all of the topics. The table on the right shows those interviews\n          most strongly associated with topic, along with the percentage match\n          between the topic and interview. Clicking on an interview will show\n          metadata and the contents of the interview itself.\n        </p>\n      );\n    }\n    if (this.state.topicstate === \"doc\") {\n      header = \"Document \" + (this.state.topicdoc + 1);\n      description = null;\n    }\n\n    return (\n      <div className={\"topic-container \" + cls}>\n        <div className=\"topic-btn-grp\">\n          <button\n            className={this.state.topicstate === \"grid\" ? \"active\" : \"\"}\n            onClick={() => this.handleChangeTopicstate(\"grid\")}\n            >\n            Plot\n          </button>\n          <button\n            className={this.state.topicstate === \"list\" ? \"active\" : \"\"}\n            onClick={() => this.handleChangeTopicstate(\"list\")}\n            >\n            List\n          </button>\n        </div>\n        <div className=\"topic-header\">\n          <span>{header}</span>\n          {description}\n        </div>\n        {topicpart}\n      </div>\n    )\n  }\n}\n\n\n// ***************************************************************************\n// Main class that holds the state of the App\n\nclass Viewer extends React.Component {\n\n  // Override two standard methods of React.Component //\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: 0,\n      geodata: null,\n      interview: -1,\n      interviewdata: null,\n      interviewmedia: 'meta',\n      image: -1,\n      mapstate: { value: null, label: '[Reset]' },\n      mapfilter: { value: null, label: '[Reset]' },\n      welcome: true,\n      intertype: 'map',\n      overtype: false,\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"./data/geodata.json\").then(res => {\n      return res.json()\n    }).then(res => {\n      this.setState({\n        geodata: res,\n      });\n    });\n\n    this.handlePage(this.state.page);\n  }\n\n  handleMapstateChange(value) {\n\n    var legend = document.getElementById(\"legend-race\");\n    if (value.value === \"race\" | value.value === \"racei\")\n    {\n      legend.style.visibility = \"visible\";\n      legend.style.display = \"inline\";\n    } else {\n      legend.style.visibility = \"hidden\";\n      legend.style.display = \"none\";\n    }\n    legend = document.getElementById(\"legend-gender\");\n    if (value.value === \"gender\" | value.value === \"genderi\")\n    {\n      legend.style.visibility = \"visible\";\n      legend.style.display = \"inline\";\n    } else {\n      legend.style.visibility = \"hidden\";\n      legend.style.display = \"none\";\n    }\n\n    this.setState({\n      mapstate: value,\n    });\n  }\n\n  handleMapfilterChange(value) {\n    this.setState({\n      mapfilter: value,\n    });\n  }\n\n  handleOvertypeChange(value, intertype) {\n    this.setState({\n      overtype: value,\n    });\n\n    if (intertype) this.handleIntertype(intertype);\n    if (intertype === \"topic\") {\n      this.handleWelcome(false);\n    }\n  }\n\n  handleWelcome(value) {\n    this.setState({\n      welcome: value,\n    });\n  }\n\n  handleInterview(value) {\n    this.setState({\n      interview: value,\n      interviewdata: null,\n      interviewmedia: 'meta'\n    });\n\n    if (value >= 0)\n    {\n      fetch(\"./data/interviews/\" + value + \".json\").then(res => {\n        return res.json()\n      }).then(res => {\n        this.setState({\n          interviewdata: res,\n        });\n      });\n    }\n  }\n\n  handleImage(value) {\n    this.setState({\n      image: value,\n    });\n  }\n\n  handleMediaButton(value) {\n    this.setState({\n      interviewmedia: value,\n    });\n  }\n\n  handleOverlay(value, media) {\n    if (media === undefined)\n    {\n      media = this.state.media\n    }\n\n    this.handleWelcome(false);\n\n    this.setState({\n      overlay: value,\n      media: media\n    });\n  }\n\n  handleIntertype(value) {\n    if (value === \"map\") {\n      this.handleMapstateChange({ value: null, label: '[Reset]' });\n      this.handleMapfilterChange({ value: null, label: '[Reset]' });\n    }\n\n    this.setState({\n      intertype: value,\n      interview: -1\n    });\n\n  }\n\n  handlePage(page) {\n      this.handleOvertypeChange(false);\n\n      this.setState({\n        page: page,\n        data: null,\n      });\n  }\n\n  render() {\n\n    if (!this.state.geodata) {\n      return <span>Waiting...</span>\n    }\n\n    const options = [\n      { value: 'gender', label: 'Gender of Interviewee' },\n      { value: 'race', label: 'Race of Interviewee' },\n      { value: 'genderi', label: 'Gender of Interviewer' },\n      { value: 'racei', label: 'Race of Interviewer' },\n      { value: null, label: '[Reset]' }\n    ];\n\n    const options_int = [\n      { value: null, label: '[Reset]' },\n      { value: 'bernicekellyharris', label: 'Bernice Kelly Harris [83]' },\n      { value: 'maryahicks', label: 'Mary A. Hicks [51]' },\n      { value: 'roseshepherd', label: 'Rose Shepherd [40]' },\n      { value: 'gracemccune', label: 'Grace McCune [39]' },\n      { value: 'sadiebhornsby', label: 'Sadie B. Hornsby [39]' },\n      { value: 'williamoforster', label: 'William O. Forster [36]' },\n      { value: 'idalmoore', label: 'Ida L. Moore [35]' },\n      { value: 'wwdixon', label: 'W.W. Dixon [25]' },\n      { value: 'adyleengmerrick', label: 'Adyleen G. Merrick [22]' },\n      { value: 'wosaunders', label: 'W. O. Saunders [21]' }\n    ];\n\n    const map = (\n      <div id=\"map-container\">\n        <Map\n          bounds={[[25.53511, -92.33793], [38.47061, -75.68696]]}\n          zoomControl={false}\n          scrollWheelZoom={false}\n          touchZoom={false}\n          minZoom={5}\n          maxZoom={10}\n          maxBounds={[[20, -95], [45, -70]]}\n          attributionControl={false}>\n          <ZoomControl\n            position='topright'\n            />\n          <Legend\n            position='bottomright'\n            color='race'\n            id=\"legend-race\"\n            />\n          <Legend\n            position='bottomright'\n            color='gender'\n            id=\"legend-gender\"\n            />\n          <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            attribution=\"\"\n            scrollWheelZoom=\"false\"\n            touchZoom=\"false\"\n            doubleClickZoom=\"false\"\n          />\n\n          {this.state.geodata.map( (val, i) => {\n\n            var tcolor = \"black\";\n            if (this.state.mapstate.value === \"race\") tcolor = val.race;\n            if (this.state.mapstate.value === \"gender\") tcolor = val.gender;\n            if (this.state.mapstate.value === \"racei\") tcolor = val.racei;\n            if (this.state.mapstate.value === \"genderi\") tcolor = val.genderi;\n\n            if (this.state.mapfilter.value !== null) {\n              if (val.ishow !== this.state.mapfilter.value) {\n                return (null)\n              }\n            }\n\n            return (\n              <div key={i}>\n              <CircleMarker\n                center={[val.lat, val.lon]}\n                radius={5}\n                color={tcolor}\n                stroke={false}\n                onClick={() => this.handleInterview(val.id)}>\n                <Tooltip direction=\"top\" offset={[0,-6]}>\n                  <b>{val.title}</b><br/>\n                  Interviewer: {val.interviewer}\n                </Tooltip>\n              </CircleMarker>\n              </div>\n            )\n          })}\n\n          <div className=\"custom-leaflet leaflet-top leaflet-right\">\n            <div className=\"custom-leaflet-inner\" >\n               <Dropdown options={options}\n                value={\n                  this.state.mapstate.value === null ?\n                  null : this.state.mapstate\n                }\n                placeholder=\"Color interviews by...\"\n                onChange={(e) => this.handleMapstateChange(e)}\n                className=\"dropdown\"\n                />\n               <Dropdown options={options_int}\n                value={\n                  this.state.mapfilter.value === null ?\n                  null : this.state.mapfilter\n                }\n                placeholder=\"Filter by interviewer...\"\n                onChange={(e) => this.handleMapfilterChange(e)}\n                className=\"dropdown\"\n                />\n            </div>\n          </div>\n        </Map>\n      </div>\n    )\n\n    return (\n    <div>\n    <div id=\"header\">\n\n      <span onClick={() => this.handlePage(0)}>\n        Voice of a Nation: Life Histories in New Deal America\n      </span>\n\n      <div className=\"btn-group\">\n        <button\n          className={this.state.page === 1 ? \"active\" : \"\"}\n          onClick={() => this.handlePage(1)}>I</button>\n        <button\n          className={this.state.page === 2 ? \"active\" : \"\"}\n          onClick={() => this.handlePage(2)}>1</button>\n        <button\n          className={this.state.page === 3 ? \"active\" : \"\"}\n          onClick={() => this.handlePage(3)}>2</button>\n        <button\n          className={this.state.page === 4 ? \"active\" : \"\"}\n          onClick={() => this.handlePage(4)}>3</button>\n        <button\n          className={this.state.page === 6 ? \"active\" : \"\"}\n          onClick={() => this.handlePage(6)}>C</button>\n        <button\n          className={this.state.page === 7 ? \"active\" : \"\"}\n          onClick={() => this.handlePage(7)}>M</button>\n        <button\n          className={this.state.page === 0 ? \"btn-text active\" : \"btn-text\"}\n          onClick={() => this.handlePage(0)}>Contents</button>\n      </div>\n    </div>\n\n    <TextBox\n      page={this.state.page}\n      handlePage={this.handlePage.bind(this)}\n      clickmap={() => this.handleOvertypeChange(true, 'map')}\n      clicktopic={() => this.handleOvertypeChange(true, 'topic')}\n    />\n\n    <div\n      id=\"multi-container\"\n      onClick={() => this.handleOverlay(false)}\n      className={this.state.overtype ? \"\" : \"hidden-sml\"}>\n      <button\n        id=\"multi-btn-back\"\n        onClick={() => this.handleOvertypeChange(false)}>&laquo; Text</button>\n      <div\n        id=\"welcome-container\"\n        className={this.state.welcome ? \"\" : \"hidden\"}>\n        <div className=\"welcome-msg\" onClick={() => this.handleWelcome(false)}>\n          <h3>Mapping Southern Life Histories</h3>\n          <p>\n            The interactive map in this panel show over 1100 oral histories\n            by the Southern Life Histories Project from 1939 to 1941. Points\n            are mapped to where each oral history was recorded. Clicking on\n            a dot to display metadata and the text from each digitized life\n            history. Points can further colored by the demographics of the\n            interviewees from the pull down menu in the upper left-hand corner\n            of the map.\n          </p>\n          <div style={{width: \"100%\", textAlign: \"center\"}}>\n            <button onClick={() => this.handleWelcome(false)}>Enter</button>\n          </div>\n        </div>\n      </div>\n      <InterviewBox\n        interview={this.state.interview}\n        interviewdata={this.state.interviewdata}\n        interviewmedia={this.state.interviewmedia}\n        handleInterview={this.handleInterview.bind(this)}\n        handleMediaButton={this.handleMediaButton.bind(this)}\n      />\n      <TopicContainer\n        hidden={this.state.intertype !== \"topic\"}\n      />\n      <div id=\"map-container\">\n        {map}\n      </div>\n      <div className=\"overlay-btn-grp\">\n        <button\n          className={this.state.intertype === \"map\" ? \"active\" : \"\"}\n          onClick={() => this.handleIntertype(\"map\")}\n          >\n          Map\n        </button>\n        <button\n          className={this.state.intertype === \"topic\" ? \"active\" : \"\"}\n          onClick={() => this.handleIntertype(\"topic\")}\n          >\n          Topics\n        </button>\n      </div>\n    </div>\n\n    <div id=\"footer\">\n      <span id=\"authors\">T. Arnold, C. Rivard, L. Tilton</span>\n      <span id=\"notice\">Digital Project &mdash; Currently Under Review </span>\n    </div>\n\n    </div>\n    );\n  }\n}\n\n// ***************************************************************************\n// Wrap the App and return the rendered Viewer\n\nfunction App() {\n  return (\n    <Viewer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}